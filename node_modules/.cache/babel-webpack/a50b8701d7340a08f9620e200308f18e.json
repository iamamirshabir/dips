{"ast":null,"code":"import { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, forwardRef, ElementRef, NgZone, EventEmitter, Optional, Input, HostBinding, Output, HostListener, QueryList, ContentChildren, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/common';\nconst _c0 = [\"*\"];\n\nfunction MatDrawerContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatDrawerContainer_div_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2._onBackdropClicked();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatDrawerContainer_mat_drawer_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-drawer-content\");\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nconst _c1 = [[[\"mat-drawer\"]], [[\"mat-drawer-content\"]], \"*\"];\nconst _c2 = [\"mat-drawer\", \"mat-drawer-content\", \"*\"];\n\nfunction MatSidenavContainer_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatSidenavContainer_div_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2._onBackdropClicked();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"mat-drawer-shown\", ctx_r0._isShowingBackdrop());\n  }\n}\n\nfunction MatSidenavContainer_mat_sidenav_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-sidenav-content\", 3);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nconst _c3 = [[[\"mat-sidenav\"]], [[\"mat-sidenav-content\"]], \"*\"];\nconst _c4 = [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"];\nconst _c5 = \".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\";\nconst matDrawerAnimations = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [// We remove the `transform` here completely, rather than setting it to zero, because:\n  // 1. Having a transform can cause elements with ripples or an animated\n  //    transform to shift around in Chrome with an RTL layout (see #10023).\n  // 2. 3d transforms causes text to appear blurry on IE and Edge.\n  state('open, open-instant', style({\n    'transform': 'none',\n    'visibility': 'visible'\n  })), state('void', style({\n    // Avoids the shadow showing up when closed in SSR.\n    'box-shadow': 'none',\n    'visibility': 'hidden'\n  })), transition('void => open-instant', animate('0ms')), transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))])\n};\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\n\nfunction throwMatDuplicatedDrawerError(position) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\n\n\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n  providedIn: 'root',\n  factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\n\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\n\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n  return false;\n}\n\nclass MatDrawerContent extends CdkScrollable {\n  constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n    this._changeDetectorRef = _changeDetectorRef;\n    this._container = _container;\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n\nMatDrawerContent.ɵfac = function MatDrawerContent_Factory(t) {\n  return new (t || MatDrawerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatDrawerContainer)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nMatDrawerContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDrawerContent,\n  selectors: [[\"mat-drawer-content\"]],\n  hostAttrs: [1, \"mat-drawer-content\"],\n  hostVars: 4,\n  hostBindings: function MatDrawerContent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatDrawerContent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatDrawerContent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: MatDrawerContainer,\n  decorators: [{\n    type: Inject,\n    args: [forwardRef(() => MatDrawerContainer)]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: NgZone\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDrawerContent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-drawer-content',\n      template: '<ng-content></ng-content>',\n      host: {\n        'class': 'mat-drawer-content',\n        '[style.margin-left.px]': '_container._contentMargins.left',\n        '[style.margin-right.px]': '_container._contentMargins.right'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatDrawerContainer,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(() => MatDrawerContainer)]\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n\n\nclass MatDrawer {\n  constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, _container) {\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._focusMonitor = _focusMonitor;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._doc = _doc;\n    this._container = _container;\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    /** Whether the drawer is initialized. Used for disabling the initial animation. */\n\n    this._enableAnimations = false;\n    this._position = 'start';\n    this._mode = 'over';\n    this._disableClose = false;\n    this._opened = false;\n    /** Emits whenever the drawer has started animating. */\n\n    this._animationStarted = new Subject();\n    /** Emits whenever the drawer is done animating. */\n\n    this._animationEnd = new Subject();\n    /** Current state of the sidenav animation. */\n    // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n    // metadata is not inherited by child classes, instead the host binding data is defined in a way\n    // that can be inherited.\n    // tslint:disable:no-host-decorator-in-concrete\n\n    this._animationState = 'void';\n    /** Event emitted when the drawer open state is changed. */\n\n    this.openedChange = // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n    new EventEmitter(\n    /* isAsync */\n    true);\n    /** Event emitted when the drawer has been opened. */\n\n    this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n    /** Event emitted when the drawer has started opening. */\n\n    this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n    /** Event emitted when the drawer has been closed. */\n\n    this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n    /** Event emitted when the drawer has started closing. */\n\n    this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    /** Event emitted when the drawer's position changes. */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onPositionChanged = new EventEmitter();\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     */\n\n    this._modeChanged = new Subject();\n    this.openedChange.subscribe(opened => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n        }\n\n        this._takeFocus();\n      } else if (this._isFocusWithinDrawer()) {\n        this._restoreFocus();\n      }\n    });\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n\n    this._ngZone.runOutsideAngular(() => {\n      fromEvent(this._elementRef.nativeElement, 'keydown').pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }), takeUntil(this._destroyed)).subscribe(event => this._ngZone.run(() => {\n        this.close();\n        event.stopPropagation();\n        event.preventDefault();\n      }));\n    }); // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      const {\n        fromState,\n        toState\n      } = event;\n\n      if (toState.indexOf('open') === 0 && fromState === 'void' || toState === 'void' && fromState.indexOf('open') === 0) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n  /** The side that the drawer is attached to. */\n\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n\n\n  get mode() {\n    return this._mode;\n  }\n\n  set mode(value) {\n    this._mode = value;\n\n    this._updateFocusTrapState();\n\n    this._modeChanged.next();\n  }\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n\n\n  get disableClose() {\n    return this._disableClose;\n  }\n\n  set disableClose(value) {\n    this._disableClose = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the drawer should focus the first focusable element automatically when opened.\n   * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n   * enabled, focus will be moved into the sidenav in `side` mode as well.\n   */\n\n\n  get autoFocus() {\n    const value = this._autoFocus; // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n    // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n    // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n\n    return value == null ? this.mode !== 'side' : value;\n  }\n\n  set autoFocus(value) {\n    this._autoFocus = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n\n\n  get opened() {\n    return this._opened;\n  }\n\n  set opened(value) {\n    this.toggle(coerceBooleanProperty(value));\n  }\n  /**\n   * Moves focus into the drawer. Note that this works even if\n   * the focus trap is disabled in `side` mode.\n   */\n\n\n  _takeFocus() {\n    if (!this.autoFocus || !this._focusTrap) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n  /**\n   * Restores focus to the element that was originally focused when the drawer opened.\n   * If no element was focused at that time, the focus will be restored to the drawer.\n   */\n\n\n  _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    } // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n\n\n    if (this._elementFocusedBeforeDrawerWasOpened) {\n      this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n    } else {\n      this._elementRef.nativeElement.blur();\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n  /** Whether focus is currently within the drawer. */\n\n\n  _isFocusWithinDrawer() {\n    var _a;\n\n    const activeEl = (_a = this._doc) === null || _a === void 0 ? void 0 : _a.activeElement;\n    return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n\n    this._updateFocusTrapState();\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n\n    this._animationEnd.complete();\n\n    this._modeChanged.complete();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n\n\n  open(openedVia) {\n    return this.toggle(true, openedVia);\n  }\n  /** Close the drawer. */\n\n\n  close() {\n    return this.toggle(false);\n  }\n  /** Closes the drawer with context that the backdrop was clicked. */\n\n\n  _closeViaBackdropClick() {\n    // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n    // don't need to check whether focus is currently in the drawer, as clicking on the\n    // backdrop causes blurring of the active element.\n    return this._setOpen(\n    /* isOpen */\n    false,\n    /* restoreFocus */\n    true);\n  }\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n\n\n  toggle(isOpen = !this.opened, openedVia) {\n    // If the focus is currently inside the drawer content and we are closing the drawer,\n    // restore the focus to the initially focused element (when the drawer opened).\n    return this._setOpen(isOpen,\n    /* restoreFocus */\n    !isOpen && this._isFocusWithinDrawer(), openedVia);\n  }\n  /**\n   * Toggles the opened state of the drawer.\n   * @param isOpen Whether the drawer should open or close.\n   * @param restoreFocus Whether focus should be restored on close.\n   * @param openedVia Focus origin that can be optionally set when opening a drawer. The\n   *   origin will be used later when focus is restored on drawer close.\n   */\n\n\n  _setOpen(isOpen, restoreFocus, openedVia = 'program') {\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n\n      if (restoreFocus) {\n        this._restoreFocus();\n      }\n    }\n\n    this._updateFocusTrapState();\n\n    return new Promise(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _getWidth() {\n    return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n  }\n  /** Updates the enabled state of the focus trap. */\n\n\n  _updateFocusTrapState() {\n    if (this._focusTrap) {\n      // The focus trap is only enabled when the drawer is open in any mode other than side.\n      this._focusTrap.enabled = this.opened && this.mode !== 'side';\n    }\n  } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n  _animationStartListener(event) {\n    this._animationStarted.next(event);\n  } // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n  _animationDoneListener(event) {\n    this._animationEnd.next(event);\n  }\n\n}\n\nMatDrawer.ɵfac = function MatDrawer_Factory(t) {\n  return new (t || MatDrawer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_CONTAINER, 8));\n};\n\nMatDrawer.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDrawer,\n  selectors: [[\"mat-drawer\"]],\n  hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\"],\n  hostVars: 12,\n  hostBindings: function MatDrawer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵsyntheticHostListener(\"@transform.start\", function MatDrawer_animation_transform_start_HostBindingHandler($event) {\n        return ctx._animationStartListener($event);\n      })(\"@transform.done\", function MatDrawer_animation_transform_done_HostBindingHandler($event) {\n        return ctx._animationDoneListener($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"align\", null);\n      ɵngcc0.ɵɵsyntheticHostProperty(\"@transform\", ctx._animationState);\n      ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened);\n    }\n  },\n  inputs: {\n    position: \"position\",\n    mode: \"mode\",\n    disableClose: \"disableClose\",\n    autoFocus: \"autoFocus\",\n    opened: \"opened\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    openedStart: \"openedStart\",\n    _closedStream: \"closed\",\n    closedStart: \"closedStart\",\n    onPositionChanged: \"positionChanged\"\n  },\n  exportAs: [\"matDrawer\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-drawer-inner-container\"]],\n  template: function MatDrawer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2,\n  data: {\n    animation: [matDrawerAnimations.transformDrawer]\n  },\n  changeDetection: 0\n});\n\nMatDrawer.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: FocusMonitor\n}, {\n  type: Platform\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: MatDrawerContainer,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_DRAWER_CONTAINER]\n  }]\n}];\n\nMatDrawer.propDecorators = {\n  position: [{\n    type: Input\n  }],\n  mode: [{\n    type: Input\n  }],\n  disableClose: [{\n    type: Input\n  }],\n  autoFocus: [{\n    type: Input\n  }],\n  opened: [{\n    type: Input\n  }],\n  _animationState: [{\n    type: HostBinding,\n    args: ['@transform']\n  }],\n  openedChange: [{\n    type: Output\n  }],\n  _openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  openedStart: [{\n    type: Output\n  }],\n  _closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  closedStart: [{\n    type: Output\n  }],\n  onPositionChanged: [{\n    type: Output,\n    args: ['positionChanged']\n  }],\n  _animationStartListener: [{\n    type: HostListener,\n    args: ['@transform.start', ['$event']]\n  }],\n  _animationDoneListener: [{\n    type: HostListener,\n    args: ['@transform.done', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDrawer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-drawer',\n      exportAs: 'matDrawer',\n      template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n      animations: [matDrawerAnimations.transformDrawer],\n      host: {\n        'class': 'mat-drawer',\n        // must prevent the browser from aligning text based on value\n        '[attr.align]': 'null',\n        '[class.mat-drawer-end]': 'position === \"end\"',\n        '[class.mat-drawer-over]': 'mode === \"over\"',\n        '[class.mat-drawer-push]': 'mode === \"push\"',\n        '[class.mat-drawer-side]': 'mode === \"side\"',\n        '[class.mat-drawer-opened]': 'opened',\n        'tabIndex': '-1'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.FocusTrapFactory\n    }, {\n      type: ɵngcc2.FocusMonitor\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDrawerContainer,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DRAWER_CONTAINER]\n      }]\n    }];\n  }, {\n    _animationState: [{\n      type: HostBinding,\n      args: ['@transform']\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    openedStart: [{\n      type: Output\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    closedStart: [{\n      type: Output\n    }],\n    onPositionChanged: [{\n      type: Output,\n      args: ['positionChanged']\n    }],\n    position: [{\n      type: Input\n    }],\n    mode: [{\n      type: Input\n    }],\n    disableClose: [{\n      type: Input\n    }],\n    autoFocus: [{\n      type: Input\n    }],\n    opened: [{\n      type: Input\n    }],\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationStartListener: [{\n      type: HostListener,\n      args: ['@transform.start', ['$event']]\n    }],\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationDoneListener: [{\n      type: HostListener,\n      args: ['@transform.done', ['$event']]\n    }]\n  });\n})();\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n\n\nclass MatDrawerContainer {\n  constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n    this._dir = _dir;\n    this._element = _element;\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._animationMode = _animationMode;\n    /** Drawers that belong to this container. */\n\n    this._drawers = new QueryList();\n    /** Event emitted when the drawer backdrop is clicked. */\n\n    this.backdropClick = new EventEmitter();\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    /** Emits on every ngDoCheck. Used for debouncing reflows. */\n\n    this._doCheckSubject = new Subject();\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     */\n\n    this._contentMargins = {\n      left: null,\n      right: null\n    };\n    this._contentMarginChanges = new Subject(); // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n\n        this.updateContentMargins();\n      });\n    } // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n\n\n    viewportRuler.change().pipe(takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n    this._autosize = defaultAutosize;\n  }\n  /** The drawer child with the `start` position. */\n\n\n  get start() {\n    return this._start;\n  }\n  /** The drawer child with the `end` position. */\n\n\n  get end() {\n    return this._end;\n  }\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n\n\n  get autosize() {\n    return this._autosize;\n  }\n\n  set autosize(value) {\n    this._autosize = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n\n\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n\n  set hasBackdrop(value) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n\n\n  get scrollable() {\n    return this._userContent || this._content;\n  }\n\n  ngAfterContentInit() {\n    this._allDrawers.changes.pipe(startWith(this._allDrawers), takeUntil(this._destroyed)).subscribe(drawer => {\n      this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n\n      this._drawers.notifyOnChanges();\n    });\n\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach(drawer => {\n        this._watchDrawerToggle(drawer);\n\n        this._watchDrawerPosition(drawer);\n\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length || this._isDrawerOpen(this._start) || this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }); // Avoid hitting the NgZone through the debounce timeout.\n\n\n    this._ngZone.runOutsideAngular(() => {\n      this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n    });\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n\n    this._doCheckSubject.complete();\n\n    this._drawers.destroy();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /** Calls `open` of both start and end drawers */\n\n\n  open() {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n  /** Calls `close` of both start and end drawers */\n\n\n  close() {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n\n\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._getWidth();\n      } else if (this._left.mode == 'push') {\n        const width = this._left._getWidth();\n\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._getWidth();\n      } else if (this._right.mode == 'push') {\n        const width = this._right._getWidth();\n\n        right += width;\n        left -= width;\n      }\n    } // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n\n\n    left = left || null;\n    right = right || null;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {\n        left,\n        right\n      }; // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n\n\n  _watchDrawerToggle(drawer) {\n    drawer._animationStarted.pipe(filter(event => event.fromState !== event.toState), takeUntil(this._drawers.changes)).subscribe(event => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() => this._setContainerClass(drawer.opened));\n    }\n  }\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n\n\n  _watchDrawerPosition(drawer) {\n    if (!drawer) {\n      return;\n    } // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n\n\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n\n\n  _watchDrawerMode(drawer) {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed))).subscribe(() => {\n        this.updateContentMargins();\n\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n\n\n  _setContainerClass(isAdd) {\n    const classList = this._element.nativeElement.classList;\n    const className = 'mat-drawer-container-has-open';\n\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n  /** Validate the state of the drawer children components. */\n\n\n  _validateDrawers() {\n    this._start = this._end = null; // Ensure that we have at most one start and one end drawer.\n\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDuplicatedDrawerError('end');\n        }\n\n        this._end = drawer;\n      } else {\n        if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDuplicatedDrawerError('start');\n        }\n\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null; // Detect if we're LTR or RTL.\n\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n  /** Whether the container is being pushed to the side by one of the drawers. */\n\n\n  _isPushed() {\n    return this._isDrawerOpen(this._start) && this._start.mode != 'over' || this._isDrawerOpen(this._end) && this._end.mode != 'over';\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n\n    this._closeModalDrawersViaBackdrop();\n  }\n\n  _closeModalDrawersViaBackdrop() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end].filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer)).forEach(drawer => drawer._closeViaBackdropClick());\n  }\n\n  _isShowingBackdrop() {\n    return this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start) || this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end);\n  }\n\n  _canHaveBackdrop(drawer) {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  _isDrawerOpen(drawer) {\n    return drawer != null && drawer.opened;\n  }\n\n}\n\nMatDrawerContainer.ɵfac = function MatDrawerContainer_Factory(t) {\n  return new (t || MatDrawerContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_DRAWER_DEFAULT_AUTOSIZE), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatDrawerContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDrawerContainer,\n  selectors: [[\"mat-drawer-container\"]],\n  contentQueries: function MatDrawerContainer_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawerContent, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatDrawer, 1);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    }\n  },\n  viewQuery: function MatDrawerContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatDrawerContent, 1);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._userContent = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-drawer-container\"],\n  hostVars: 2,\n  hostBindings: function MatDrawerContainer_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    }\n  },\n  inputs: {\n    autosize: \"autosize\",\n    hasBackdrop: \"hasBackdrop\"\n  },\n  outputs: {\n    backdropClick: \"backdropClick\"\n  },\n  exportAs: [\"matDrawerContainer\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_DRAWER_CONTAINER,\n    useExisting: MatDrawerContainer\n  }])],\n  ngContentSelectors: _c2,\n  decls: 4,\n  vars: 2,\n  consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"]],\n  template: function MatDrawerContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵtemplate(0, MatDrawerContainer_div_0_Template, 1, 2, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵtemplate(3, MatDrawerContainer_mat_drawer_content_3_Template, 2, 0, \"mat-drawer-content\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n    }\n  },\n  directives: [ɵngcc5.NgIf, MatDrawerContent],\n  styles: [_c5],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatDrawerContainer.ctorParameters = () => [{\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ViewportRuler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\nMatDrawerContainer.propDecorators = {\n  _allDrawers: [{\n    type: ContentChildren,\n    args: [MatDrawer, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }],\n  _content: [{\n    type: ContentChild,\n    args: [MatDrawerContent]\n  }],\n  _userContent: [{\n    type: ViewChild,\n    args: [MatDrawerContent]\n  }],\n  autosize: [{\n    type: Input\n  }],\n  hasBackdrop: [{\n    type: Input\n  }],\n  backdropClick: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatDrawerContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-drawer-container',\n      exportAs: 'matDrawerContainer',\n      template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n      host: {\n        'class': 'mat-drawer-container',\n        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: MAT_DRAWER_CONTAINER,\n        useExisting: MatDrawerContainer\n      }],\n      styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc4.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    backdropClick: [{\n      type: Output\n    }],\n    autosize: [{\n      type: Input\n    }],\n    hasBackdrop: [{\n      type: Input\n    }],\n    _allDrawers: [{\n      type: ContentChildren,\n      args: [MatDrawer, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }],\n    _content: [{\n      type: ContentChild,\n      args: [MatDrawerContent]\n    }],\n    _userContent: [{\n      type: ViewChild,\n      args: [MatDrawerContent]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSidenavContent extends MatDrawerContent {\n  constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n\n}\n\nMatSidenavContent.ɵfac = function MatSidenavContent_Factory(t) {\n  return new (t || MatSidenavContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatSidenavContainer)), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nMatSidenavContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSidenavContent,\n  selectors: [[\"mat-sidenav-content\"]],\n  hostAttrs: [1, \"mat-drawer-content\", \"mat-sidenav-content\"],\n  hostVars: 4,\n  hostBindings: function MatSidenavContent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx._container._contentMargins.left, \"px\")(\"margin-right\", ctx._container._contentMargins.right, \"px\");\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatSidenavContent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatSidenavContent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: MatSidenavContainer,\n  decorators: [{\n    type: Inject,\n    args: [forwardRef(() => MatSidenavContainer)]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: NgZone\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSidenavContent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-sidenav-content',\n      template: '<ng-content></ng-content>',\n      host: {\n        'class': 'mat-drawer-content mat-sidenav-content',\n        '[style.margin-left.px]': '_container._contentMargins.left',\n        '[style.margin-right.px]': '_container._contentMargins.right'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatSidenavContainer,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(() => MatSidenavContainer)]\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n\nclass MatSidenav extends MatDrawer {\n  constructor() {\n    super(...arguments);\n    this._fixedInViewport = false;\n    this._fixedTopGap = 0;\n    this._fixedBottomGap = 0;\n  }\n  /** Whether the sidenav is fixed in the viewport. */\n\n\n  get fixedInViewport() {\n    return this._fixedInViewport;\n  }\n\n  set fixedInViewport(value) {\n    this._fixedInViewport = coerceBooleanProperty(value);\n  }\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n\n\n  get fixedTopGap() {\n    return this._fixedTopGap;\n  }\n\n  set fixedTopGap(value) {\n    this._fixedTopGap = coerceNumberProperty(value);\n  }\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n\n\n  get fixedBottomGap() {\n    return this._fixedBottomGap;\n  }\n\n  set fixedBottomGap(value) {\n    this._fixedBottomGap = coerceNumberProperty(value);\n  }\n\n}\n\nMatSidenav.ɵfac = function MatSidenav_Factory(t) {\n  return ɵMatSidenav_BaseFactory(t || MatSidenav);\n};\n\nMatSidenav.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSidenav,\n  selectors: [[\"mat-sidenav\"]],\n  hostAttrs: [\"tabIndex\", \"-1\", 1, \"mat-drawer\", \"mat-sidenav\"],\n  hostVars: 17,\n  hostBindings: function MatSidenav_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"align\", null);\n      ɵngcc0.ɵɵstyleProp(\"top\", ctx.fixedInViewport ? ctx.fixedTopGap : null, \"px\")(\"bottom\", ctx.fixedInViewport ? ctx.fixedBottomGap : null, \"px\");\n      ɵngcc0.ɵɵclassProp(\"mat-drawer-end\", ctx.position === \"end\")(\"mat-drawer-over\", ctx.mode === \"over\")(\"mat-drawer-push\", ctx.mode === \"push\")(\"mat-drawer-side\", ctx.mode === \"side\")(\"mat-drawer-opened\", ctx.opened)(\"mat-sidenav-fixed\", ctx.fixedInViewport);\n    }\n  },\n  inputs: {\n    fixedInViewport: \"fixedInViewport\",\n    fixedTopGap: \"fixedTopGap\",\n    fixedBottomGap: \"fixedBottomGap\"\n  },\n  exportAs: [\"matSidenav\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-drawer-inner-container\"]],\n  template: function MatSidenav_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2,\n  data: {\n    animation: [matDrawerAnimations.transformDrawer]\n  },\n  changeDetection: 0\n});\nMatSidenav.propDecorators = {\n  fixedInViewport: [{\n    type: Input\n  }],\n  fixedTopGap: [{\n    type: Input\n  }],\n  fixedBottomGap: [{\n    type: Input\n  }]\n};\nconst ɵMatSidenav_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatSidenav);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSidenav, [{\n    type: Component,\n    args: [{\n      selector: 'mat-sidenav',\n      exportAs: 'matSidenav',\n      template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n      animations: [matDrawerAnimations.transformDrawer],\n      host: {\n        'class': 'mat-drawer mat-sidenav',\n        'tabIndex': '-1',\n        // must prevent the browser from aligning text based on value\n        '[attr.align]': 'null',\n        '[class.mat-drawer-end]': 'position === \"end\"',\n        '[class.mat-drawer-over]': 'mode === \"over\"',\n        '[class.mat-drawer-push]': 'mode === \"push\"',\n        '[class.mat-drawer-side]': 'mode === \"side\"',\n        '[class.mat-drawer-opened]': 'opened',\n        '[class.mat-sidenav-fixed]': 'fixedInViewport',\n        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, {\n    fixedInViewport: [{\n      type: Input\n    }],\n    fixedTopGap: [{\n      type: Input\n    }],\n    fixedBottomGap: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MatSidenavContainer extends MatDrawerContainer {}\n\nMatSidenavContainer.ɵfac = function MatSidenavContainer_Factory(t) {\n  return ɵMatSidenavContainer_BaseFactory(t || MatSidenavContainer);\n};\n\nMatSidenavContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSidenavContainer,\n  selectors: [[\"mat-sidenav-container\"]],\n  contentQueries: function MatSidenavContainer_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenavContent, 1);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatSidenav, 1);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._content = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allDrawers = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-drawer-container\", \"mat-sidenav-container\"],\n  hostVars: 2,\n  hostBindings: function MatSidenavContainer_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-drawer-container-explicit-backdrop\", ctx._backdropOverride);\n    }\n  },\n  exportAs: [\"matSidenavContainer\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_DRAWER_CONTAINER,\n    useExisting: MatSidenavContainer\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 4,\n  vars: 2,\n  consts: [[\"class\", \"mat-drawer-backdrop\", 3, \"mat-drawer-shown\", \"click\", 4, \"ngIf\"], [\"cdkScrollable\", \"\", 4, \"ngIf\"], [1, \"mat-drawer-backdrop\", 3, \"click\"], [\"cdkScrollable\", \"\"]],\n  template: function MatSidenavContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c3);\n      ɵngcc0.ɵɵtemplate(0, MatSidenavContainer_div_0_Template, 1, 2, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵtemplate(3, MatSidenavContainer_mat_sidenav_content_3_Template, 2, 0, \"mat-sidenav-content\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasBackdrop);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._content);\n    }\n  },\n  directives: [ɵngcc5.NgIf, MatSidenavContent, ɵngcc1.CdkScrollable],\n  styles: [_c5],\n  encapsulation: 2,\n  changeDetection: 0\n});\nMatSidenavContainer.propDecorators = {\n  _allDrawers: [{\n    type: ContentChildren,\n    args: [MatSidenav, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }],\n  _content: [{\n    type: ContentChild,\n    args: [MatSidenavContent]\n  }]\n};\nconst ɵMatSidenavContainer_BaseFactory = /*@__PURE__*/ɵngcc0.ɵɵgetInheritedFactory(MatSidenavContainer);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSidenavContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-sidenav-container',\n      exportAs: 'matSidenavContainer',\n      template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable>\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n      host: {\n        'class': 'mat-drawer-container mat-sidenav-container',\n        '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: MAT_DRAWER_CONTAINER,\n        useExisting: MatSidenavContainer\n      }],\n      styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n    }]\n  }], null, {\n    _allDrawers: [{\n      type: ContentChildren,\n      args: [MatSidenav, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }],\n    _content: [{\n      type: ContentChild,\n      args: [MatSidenavContent]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSidenavModule {}\n\nMatSidenavModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSidenavModule\n});\nMatSidenavModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatSidenavModule_Factory(t) {\n    return new (t || MatSidenavModule)();\n  },\n  imports: [[CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule], CdkScrollableModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSidenavModule, {\n    declarations: function () {\n      return [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent];\n    },\n    imports: function () {\n      return [CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule];\n    },\n    exports: function () {\n      return [CdkScrollableModule, MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSidenavModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule],\n      exports: [CdkScrollableModule, MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent],\n      declarations: [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError, MAT_DRAWER_CONTAINER as ɵangular_material_src_material_sidenav_sidenav_a };","map":{"version":3,"sources":["../../../../../../src/material/sidenav/drawer-animations.ts","../../../../../../src/material/sidenav/drawer.ts","../../../../../../src/material/sidenav/sidenav.ts","../../../../../../src/material/sidenav/sidenav-module.ts","../../../../../../src/material/sidenav/public-api.ts","../../../../../../src/material/sidenav/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  HostListener,\n  HostBinding,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n  mapTo,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Drawer and SideNav display modes. */\nexport type MatDrawerMode = 'over' | 'push' | 'side';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nexport const MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): MatDrawerMode { return this._mode; }\n  set mode(value: MatDrawerMode) {\n    this._mode = value;\n    this._updateFocusTrapState();\n    this._modeChanged.next();\n  }\n  private _mode: MatDrawerMode = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /**\n   * Whether the drawer should focus the first focusable element automatically when opened.\n   * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n   * enabled, focus will be moved into the sidenav in `side` mode as well.\n   */\n  @Input()\n  get autoFocus(): boolean {\n    const value = this._autoFocus;\n\n    // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n    // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n    // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n    return value == null ? this.mode !== 'side' : value;\n  }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean | undefined;\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n  // metadata is not inherited by child classes, instead the host binding data is defined in a way\n  // that can be inherited.\n  // tslint:disable:no-host-decorator-in-concrete\n  @HostBinding('@transform')\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  _openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  readonly openedStart: Observable<void> = this._animationStarted.pipe(\n    filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n    mapTo(undefined)\n  );\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  _closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  readonly closedStart: Observable<void> = this._animationStarted.pipe(\n    filter(e => e.fromState !== e.toState && e.toState === 'void'),\n    mapTo(undefined)\n  );\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any,\n              @Optional() @Inject(MAT_DRAWER_CONTAINER) public _container?: MatDrawerContainer) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        this._takeFocus();\n      } else if (this._isFocusWithinDrawer()) {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        (fromEvent(this._elementRef.nativeElement, 'keydown') as Observable<KeyboardEvent>).pipe(\n            filter(event => {\n              return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }),\n            takeUntil(this._destroyed)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n            event.preventDefault();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /**\n   * Moves focus into the drawer. Note that this works even if\n   * the focus trap is disabled in `side` mode.\n   */\n  private _takeFocus() {\n    if (!this.autoFocus || !this._focusTrap) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * Restores focus to the element that was originally focused when the drawer opened.\n   * If no element was focused at that time, the focus will be restored to the drawer.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n    if (this._elementFocusedBeforeDrawerWasOpened) {\n      this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n    } else {\n      this._elementRef.nativeElement.blur();\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  /** Whether focus is currently within the drawer. */\n  private _isFocusWithinDrawer(): boolean {\n    const activeEl = this._doc?.activeElement;\n    return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._updateFocusTrapState();\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /** Closes the drawer with context that the backdrop was clicked. */\n  _closeViaBackdropClick(): Promise<MatDrawerToggleResult> {\n    // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n    // don't need to check whether focus is currently in the drawer, as clicking on the\n    // backdrop causes blurring of the active element.\n    return this._setOpen(/* isOpen */ false, /* restoreFocus */ true);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia?: FocusOrigin)\n      : Promise<MatDrawerToggleResult> {\n    // If the focus is currently inside the drawer content and we are closing the drawer,\n    // restore the focus to the initially focused element (when the drawer opened).\n    return this._setOpen(\n        isOpen, /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), openedVia);\n  }\n\n  /**\n   * Toggles the opened state of the drawer.\n   * @param isOpen Whether the drawer should open or close.\n   * @param restoreFocus Whether focus should be restored on close.\n   * @param openedVia Focus origin that can be optionally set when opening a drawer. The\n   *   origin will be used later when focus is restored on drawer close.\n   */\n  private _setOpen(isOpen: boolean, restoreFocus: boolean, openedVia: FocusOrigin = 'program')\n      : Promise<MatDrawerToggleResult> {\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      if (restoreFocus) {\n        this._restoreFocus();\n      }\n    }\n\n    this._updateFocusTrapState();\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _getWidth(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n\n  /** Updates the enabled state of the focus trap. */\n  private _updateFocusTrapState() {\n    if (this._focusTrap) {\n      // The focus trap is only enabled when the drawer is open in any mode other than side.\n      this._focusTrap.enabled = this.opened && this.mode !== 'side';\n    }\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.start', ['$event'])\n  _animationStartListener(event: AnimationEvent) {\n    this._animationStarted.next(event);\n  }\n\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('@transform.done', ['$event'])\n  _animationDoneListener(event: AnimationEvent) {\n    this._animationEnd.next(event);\n  }\n\n  static ngAcceptInputType_disableClose: BooleanInput;\n  static ngAcceptInputType_autoFocus: BooleanInput;\n  static ngAcceptInputType_opened: BooleanInput;\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [{\n    provide: MAT_DRAWER_CONTAINER,\n    useExisting: MatDrawerContainer\n  }]\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  /** All drawers in the container. Includes drawers from inside nested containers. */\n  @ContentChildren(MatDrawer, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _allDrawers: QueryList<MatDrawer>;\n\n  /** Drawers that belong to this container. */\n  _drawers = new QueryList<MatDrawer>();\n\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              viewportRuler: ViewportRuler,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this.updateContentMargins());\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._allDrawers.changes\n      .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n      .subscribe((drawer: QueryList<MatDrawer>) => {\n        this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n        this._drawers.notifyOnChanges();\n      });\n\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Avoid hitting the NgZone through the debounce timeout.\n    this._ngZone.runOutsideAngular(() => {\n      this._doCheckSubject.pipe(\n        debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n        takeUntil(this._destroyed)\n      ).subscribe(() => this.updateContentMargins());\n    });\n  }\n\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._drawers.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._getWidth();\n      } else if (this._left.mode == 'push') {\n        const width = this._left._getWidth();\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._getWidth();\n      } else if (this._right.mode == 'push') {\n        const width = this._right._getWidth();\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      filter((event: AnimationEvent) => event.fromState !== event.toState),\n      takeUntil(this._drawers.changes),\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this.updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    const classList = this._element.nativeElement.classList;\n    const className = 'mat-drawer-container-has-open';\n\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawersViaBackdrop();\n  }\n\n  _closeModalDrawersViaBackdrop() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!._closeViaBackdropClick());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  static ngAcceptInputType_autosize: BooleanInput;\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent, MAT_DRAWER_CONTAINER} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-drawer-opened]': 'opened',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n\n  static ngAcceptInputType_fixedInViewport: BooleanInput;\n  static ngAcceptInputType_fixedTopGap: NumberInput;\n  static ngAcceptInputType_fixedBottomGap: NumberInput;\n}\n\n\n@Component({\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [{\n    provide: MAT_DRAWER_CONTAINER,\n    useExisting: MatSidenavContainer\n  }]\n\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  })\n  _allDrawers: QueryList<MatSidenav>;\n\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PlatformModule,\n    CdkScrollableModule,\n  ],\n  exports: [\n    CdkScrollableModule,\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './sidenav-module';\nexport {\n  throwMatDuplicatedDrawerError,\n  MatDrawerToggleResult,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n  MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n  MatDrawerContent,\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerMode,\n} from './drawer';\nexport * from './sidenav';\nexport * from './drawer-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MAT_DRAWER_CONTAINER as Éµangular_material_src_material_sidenav_sidenav_a} from './drawer';"]},"metadata":{},"sourceType":"module"}