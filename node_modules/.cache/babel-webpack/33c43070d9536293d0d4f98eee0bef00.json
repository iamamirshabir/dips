{"ast":null,"code":"import { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, Optional, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\n\nclass BlockScrollStrategy {\n  constructor(_viewportRuler, document) {\n    this._viewportRuler = _viewportRuler;\n    this._previousHTMLStyles = {\n      top: '',\n      left: ''\n    };\n    this._isEnabled = false;\n    this._document = document;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  attach() {}\n  /** Blocks page-level scroll while the attached overlay is open. */\n\n\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement;\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition(); // Cache the previous inline styles in case the user had set them.\n\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || ''; // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n  /** Unblocks page-level scroll while the attached overlay is open. */\n\n\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement;\n      const body = this._document.body;\n      const htmlStyle = html.style;\n      const bodyStyle = body.style;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n      this._isEnabled = false;\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock'); // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n\n      htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n      htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n      bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n    }\n  }\n\n  _canBeEnabled() {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n\n    const viewport = this._viewportRuler.getViewportSize();\n\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\n\n\nfunction getMatScrollStrategyAlreadyAttachedError() {\n  return Error(`Scroll strategy has already been attached.`);\n}\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\n\n\nclass CloseScrollStrategy {\n  constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._config = _config;\n    this._scrollSubscription = null;\n    /** Detaches the overlay ref and disables the scroll strategy. */\n\n    this._detach = () => {\n      this.disable();\n\n      if (this._overlayRef.hasAttached()) {\n        this._ngZone.run(() => this._overlayRef.detach());\n      }\n    };\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n  /** Enables the closing of the attached overlay on scroll. */\n\n\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n  /** Disables the closing the attached overlay on scroll. */\n\n\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Scroll strategy that doesn't do anything. */\n\n\nclass NoopScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n\n\n  disable() {}\n  /** Does nothing, as this scroll strategy is a no-op. */\n\n\n  attach() {}\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\n\n\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\n\n\nfunction isElementClippedByScrolling(element, scrollContainers) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\n\n\nclass RepositionScrollStrategy {\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    this._config = _config;\n    this._scrollSubscription = null;\n  }\n  /** Attaches this scroll strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n  /** Enables repositioning of the attached overlay on scroll. */\n\n\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition(); // TODO(crisbeto): make `close` on by default once all components can handle it.\n\n\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n\n          const {\n            width,\n            height\n          } = this._viewportRuler.getViewportSize(); // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n\n\n          const parentRects = [{\n            width,\n            height,\n            bottom: height,\n            right: width,\n            top: 0,\n            left: 0\n          }];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n  /** Disables repositioning of the attached overlay on scroll. */\n\n\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n\n\nclass ScrollStrategyOptions {\n  constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewportRuler = _viewportRuler;\n    this._ngZone = _ngZone;\n    /** Do nothing on scroll. */\n\n    this.noop = () => new NoopScrollStrategy();\n    /**\n     * Close the overlay as soon as the user scrolls.\n     * @param config Configuration to be used inside the scroll strategy.\n     */\n\n\n    this.close = config => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n    /** Block scrolling. */\n\n\n    this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n    /**\n     * Update the overlay's position on scroll.\n     * @param config Configuration to be used inside the scroll strategy.\n     * Allows debouncing the reposition calls.\n     */\n\n\n    this.reposition = config => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n\n    this._document = document;\n  }\n\n}\n\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) {\n  return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nScrollStrategyOptions.ɵprov = ɵɵdefineInjectable({\n  factory: function ScrollStrategyOptions_Factory() {\n    return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT));\n  },\n  token: ScrollStrategyOptions,\n  providedIn: \"root\"\n});\n\nScrollStrategyOptions.ctorParameters = () => [{\n  type: ScrollDispatcher\n}, {\n  type: ViewportRuler\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ScrollDispatcher\n    }, {\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Initial configuration used when creating an overlay. */\n\n\nclass OverlayConfig {\n  constructor(config) {\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    this.scrollStrategy = new NoopScrollStrategy();\n    /** Custom class to add to the overlay pane. */\n\n    this.panelClass = '';\n    /** Whether the overlay has a backdrop. */\n\n    this.hasBackdrop = false;\n    /** Custom class to add to the backdrop */\n\n    this.backdropClass = 'cdk-overlay-dark-backdrop';\n    /**\n     * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.disposeOnNavigation = false;\n\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys = Object.keys(config);\n\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key];\n        }\n      }\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The points of the origin element and the overlay element to connect. */\n\n\nclass ConnectionPositionPair {\n  constructor(origin, overlay,\n  /** Offset along the X axis. */\n  offsetX,\n  /** Offset along the Y axis. */\n  offsetY,\n  /** Class(es) to be applied to the panel while this position is active. */\n  panelClass) {\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.panelClass = panelClass;\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\n\n\nclass ScrollingVisibility {}\n/** The change event emitted by the strategy when a fallback position is used. */\n\n\nclass ConnectedOverlayPositionChange {\n  constructor(\n  /** The position used as a result of this change. */\n  connectionPair,\n  /** @docs-private */\n  scrollableViewProperties) {\n    this.connectionPair = connectionPair;\n    this.scrollableViewProperties = scrollableViewProperties;\n  }\n\n}\n\nConnectedOverlayPositionChange.ctorParameters = () => [{\n  type: ConnectionPositionPair\n}, {\n  type: ScrollingVisibility,\n  decorators: [{\n    type: Optional\n  }]\n}];\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateVerticalPosition(property, value) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\n\n\nfunction validateHorizontalPosition(property, value) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` + `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nclass BaseOverlayDispatcher {\n  constructor(document) {\n    /** Currently attached overlays in the order they were attached. */\n    this._attachedOverlays = [];\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this.detach();\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  add(overlayRef) {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n\n    this._attachedOverlays.push(overlayRef);\n  }\n  /** Remove an overlay from the list of attached overlay refs. */\n\n\n  remove(overlayRef) {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    } // Remove the global listener once there are no more overlays.\n\n\n    if (this._attachedOverlays.length === 0) {\n      this.detach();\n    }\n  }\n\n}\n\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) {\n  return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nBaseOverlayDispatcher.ɵprov = ɵɵdefineInjectable({\n  factory: function BaseOverlayDispatcher_Factory() {\n    return new BaseOverlayDispatcher(ɵɵinject(DOCUMENT));\n  },\n  token: BaseOverlayDispatcher,\n  providedIn: \"root\"\n});\n\nBaseOverlayDispatcher.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n  constructor(document) {\n    super(document);\n    /** Keyboard event listener that will be attached to the body. */\n\n    this._keydownListener = event => {\n      const overlays = this._attachedOverlays;\n\n      for (let i = overlays.length - 1; i > -1; i--) {\n        // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n        // We want to target the most recent overlay, rather than trying to match where the event came\n        // from, because some components might open an overlay, but keep focus on a trigger element\n        // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n        // because we don't want overlays that don't handle keyboard events to block the ones below\n        // them that do.\n        if (overlays[i]._keydownEvents.observers.length > 0) {\n          overlays[i]._keydownEvents.next(event);\n\n          break;\n        }\n      }\n    };\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  add(overlayRef) {\n    super.add(overlayRef); // Lazily start dispatcher once first overlay is added\n\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener);\n\n      this._isAttached = true;\n    }\n  }\n  /** Detaches the global keyboard event listener. */\n\n\n  detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener);\n\n      this._isAttached = false;\n    }\n  }\n\n}\n\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) {\n  return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nOverlayKeyboardDispatcher.ɵprov = ɵɵdefineInjectable({\n  factory: function OverlayKeyboardDispatcher_Factory() {\n    return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT));\n  },\n  token: OverlayKeyboardDispatcher,\n  providedIn: \"root\"\n});\n\nOverlayKeyboardDispatcher.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n\n\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n  constructor(document, _platform) {\n    super(document);\n    this._platform = _platform;\n    this._cursorStyleIsSet = false;\n    /** Click event listener that will be attached to the body propagate phase. */\n\n    this._clickListener = event => {\n      // Get the target through the `composedPath` if possible to account for shadow DOM.\n      const target = event.composedPath ? event.composedPath()[0] : event.target; // We copy the array because the original may be modified asynchronously if the\n      // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n      // the for loop.\n\n      const overlays = this._attachedOverlays.slice(); // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n      // We want to target all overlays for which the click could be considered as outside click.\n      // As soon as we reach an overlay for which the click is not outside click we break off\n      // the loop.\n\n\n      for (let i = overlays.length - 1; i > -1; i--) {\n        const overlayRef = overlays[i];\n\n        if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n          continue;\n        } // If it's a click inside the overlay, just break - we should do nothing\n        // If it's an outside click dispatch the mouse event, and proceed with the next overlay\n\n\n        if (overlayRef.overlayElement.contains(target)) {\n          break;\n        }\n\n        overlayRef._outsidePointerEvents.next(event);\n      }\n    };\n  }\n  /** Add a new overlay to the list of attached overlay refs. */\n\n\n  add(overlayRef) {\n    super.add(overlayRef); // tslint:disable: max-line-length\n    // Safari on iOS does not generate click events for non-interactive\n    // elements. However, we want to receive a click for any element outside\n    // the overlay. We can force a \"clickable\" state by setting\n    // `cursor: pointer` on the document body.\n    // See https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n    // and https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n    // tslint:enable: max-line-length\n\n    if (!this._isAttached) {\n      this._document.body.addEventListener('click', this._clickListener, true);\n\n      this._document.body.addEventListener('contextmenu', this._clickListener, true); // click event is not fired on iOS. To make element \"clickable\" we are\n      // setting the cursor to pointer\n\n\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\n        this._cursorOriginalValue = this._document.body.style.cursor;\n        this._document.body.style.cursor = 'pointer';\n        this._cursorStyleIsSet = true;\n      }\n\n      this._isAttached = true;\n    }\n  }\n  /** Detaches the global keyboard event listener. */\n\n\n  detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('click', this._clickListener, true);\n\n      this._document.body.removeEventListener('contextmenu', this._clickListener, true);\n\n      if (this._platform.IOS && this._cursorStyleIsSet) {\n        this._document.body.style.cursor = this._cursorOriginalValue;\n        this._cursorStyleIsSet = false;\n      }\n\n      this._isAttached = false;\n    }\n  }\n\n}\n\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) {\n  return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n};\n\nOverlayOutsideClickDispatcher.ɵprov = ɵɵdefineInjectable({\n  factory: function OverlayOutsideClickDispatcher_Factory() {\n    return new OverlayOutsideClickDispatcher(ɵɵinject(DOCUMENT), ɵɵinject(Platform));\n  },\n  token: OverlayOutsideClickDispatcher,\n  providedIn: \"root\"\n});\n\nOverlayOutsideClickDispatcher.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\n\n\nconst isTestEnvironment = typeof window !== 'undefined' && !!window && !!(window.__karma__ || window.jasmine);\n/** Container inside which all overlays will render. */\n\nclass OverlayContainer {\n  constructor(document, _platform) {\n    this._platform = _platform;\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    const container = this._containerElement;\n\n    if (container && container.parentNode) {\n      container.parentNode.removeChild(container);\n    }\n  }\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n\n\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n\n\n  _createContainer() {\n    const containerClass = 'cdk-overlay-container';\n\n    if (this._platform.isBrowser || isTestEnvironment) {\n      const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` + `.${containerClass}[platform=\"test\"]`); // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n\n\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n      }\n    }\n\n    const container = this._document.createElement('div');\n\n    container.classList.add(containerClass); // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n\n    if (isTestEnvironment) {\n      container.setAttribute('platform', 'test');\n    } else if (!this._platform.isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(container);\n\n    this._containerElement = container;\n  }\n\n}\n\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n};\n\nOverlayContainer.ɵprov = ɵɵdefineInjectable({\n  factory: function OverlayContainer_Factory() {\n    return new OverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform));\n  },\n  token: OverlayContainer,\n  providedIn: \"root\"\n});\n\nOverlayContainer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nclass OverlayRef {\n  constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location, _outsideClickDispatcher) {\n    this._portalOutlet = _portalOutlet;\n    this._host = _host;\n    this._pane = _pane;\n    this._config = _config;\n    this._ngZone = _ngZone;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._document = _document;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n    this._backdropElement = null;\n    this._backdropClick = new Subject();\n    this._attachments = new Subject();\n    this._detachments = new Subject();\n    this._locationChanges = Subscription.EMPTY;\n\n    this._backdropClickHandler = event => this._backdropClick.next(event);\n    /** Stream of keydown events dispatched to this overlay. */\n\n\n    this._keydownEvents = new Subject();\n    /** Stream of mouse outside events dispatched to this overlay. */\n\n    this._outsidePointerEvents = new Subject();\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n  /** The overlay's HTML element */\n\n\n  get overlayElement() {\n    return this._pane;\n  }\n  /** The overlay's backdrop HTML element. */\n\n\n  get backdropElement() {\n    return this._backdropElement;\n  }\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n\n\n  get hostElement() {\n    return this._host;\n  }\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n\n\n  attach(portal) {\n    let attachResult = this._portalOutlet.attach(portal); // Update the pane element with the given configuration.\n\n\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    this._updateStackingOrder();\n\n    this._updateElementSize();\n\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    } // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n\n\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      // The overlay could've been detached before the zone has stabilized.\n      if (this.hasAttached()) {\n        this.updatePosition();\n      }\n    }); // Enable pointer events for the overlay pane element.\n\n\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    } // Only emit the `attachments` event once all other setup is done.\n\n\n    this._attachments.next(); // Track this overlay by the keyboard dispatcher\n\n\n    this._keyboardDispatcher.add(this);\n\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    this._outsideClickDispatcher.add(this);\n\n    return attachResult;\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n\n\n  detach() {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop(); // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach(); // Only emit after everything is detached.\n\n\n    this._detachments.next(); // Remove this overlay from keyboard dispatcher tracking.\n\n\n    this._keyboardDispatcher.remove(this); // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n\n\n    this._detachContentWhenStable();\n\n    this._locationChanges.unsubscribe();\n\n    this._outsideClickDispatcher.remove(this);\n\n    return detachmentResult;\n  }\n  /** Cleans up the overlay from the DOM. */\n\n\n  dispose() {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n\n    this.detachBackdrop();\n\n    this._locationChanges.unsubscribe();\n\n    this._keyboardDispatcher.remove(this);\n\n    this._portalOutlet.dispose();\n\n    this._attachments.complete();\n\n    this._backdropClick.complete();\n\n    this._keydownEvents.complete();\n\n    this._outsidePointerEvents.complete();\n\n    this._outsideClickDispatcher.remove(this);\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n\n      this._host = null;\n    }\n\n    this._previousHostParent = this._pane = null;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n  /** Whether the overlay has attached content. */\n\n\n  hasAttached() {\n    return this._portalOutlet.hasAttached();\n  }\n  /** Gets an observable that emits when the backdrop has been clicked. */\n\n\n  backdropClick() {\n    return this._backdropClick;\n  }\n  /** Gets an observable that emits when the overlay has been attached. */\n\n\n  attachments() {\n    return this._attachments;\n  }\n  /** Gets an observable that emits when the overlay has been detached. */\n\n\n  detachments() {\n    return this._detachments;\n  }\n  /** Gets an observable of keydown events targeted to this overlay. */\n\n\n  keydownEvents() {\n    return this._keydownEvents;\n  }\n  /** Gets an observable of pointer events targeted outside this overlay. */\n\n\n  outsidePointerEvents() {\n    return this._outsidePointerEvents;\n  }\n  /** Gets the current overlay configuration, which is immutable. */\n\n\n  getConfig() {\n    return this._config;\n  }\n  /** Updates the position of the overlay based on the position strategy. */\n\n\n  updatePosition() {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n  /** Switches to a new position strategy and updates the overlay position. */\n\n\n  updatePositionStrategy(strategy) {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n  /** Update the size properties of the overlay. */\n\n\n  updateSize(sizeConfig) {\n    this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n\n    this._updateElementSize();\n  }\n  /** Sets the LTR/RTL direction for the overlay. */\n\n\n  setDirection(dir) {\n    this._config = Object.assign(Object.assign({}, this._config), {\n      direction: dir\n    });\n\n    this._updateElementDirection();\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n\n\n  addPanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n\n\n  removePanelClass(classes) {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n\n\n  getDirection() {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n  /** Switches to a new scroll strategy. */\n\n\n  updateScrollStrategy(strategy) {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n  /** Updates the text direction of the overlay panel. */\n\n\n  _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n  /** Updates the size of the overlay element based on the overlay config. */\n\n\n  _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n  /** Toggles the pointer events for the overlay pane element. */\n\n\n  _togglePointerEvents(enablePointer) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n  /** Attaches a backdrop for this overlay. */\n\n\n  _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n    this._backdropElement = this._document.createElement('div');\n\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    } // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n\n\n    this._host.parentElement.insertBefore(this._backdropElement, this._host); // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n\n\n    this._backdropElement.addEventListener('click', this._backdropClickHandler); // Add class to fade-in the backdrop after one frame.\n\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n\n\n  _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode.appendChild(this._host);\n    }\n  }\n  /** Detaches the backdrop (if any) associated with the overlay. */\n\n\n  detachBackdrop() {\n    let backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    let timeoutId;\n\n    let finishDetach = () => {\n      // It may not be attached to anything in certain cases (e.g. unit tests).\n      if (backdropToDetach) {\n        backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n        backdropToDetach.removeEventListener('transitionend', finishDetach);\n\n        if (backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n      } // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n\n\n      if (this._backdropElement == backdropToDetach) {\n        this._backdropElement = null;\n      }\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n      }\n\n      clearTimeout(timeoutId);\n    };\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n    }); // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n\n\n    backdropToDetach.style.pointerEvents = 'none'; // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n\n    timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n  }\n  /** Toggles a single CSS class or an array of classes on an element. */\n\n\n  _toggleClasses(element, cssClasses, isAdd) {\n    const classList = element.classList;\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      // Also trying to add an empty string to a DOMTokenList will throw.\n      if (cssClass) {\n        isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n      }\n    });\n  }\n  /** Detaches the overlay content next time the zone stabilizes. */\n\n\n  _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable.pipe(takeUntil(merge(this._attachments, this._detachments))).subscribe(() => {\n        // Needs a couple of checks for the pane and host, because\n        // they may have been removed by the time the zone stabilizes.\n        if (!this._pane || !this._host || this._pane.children.length === 0) {\n          if (this._pane && this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, false);\n          }\n\n          if (this._host && this._host.parentElement) {\n            this._previousHostParent = this._host.parentElement;\n\n            this._previousHostParent.removeChild(this._host);\n          }\n\n          subscription.unsubscribe();\n        }\n      });\n    });\n  }\n  /** Disposes of a scroll strategy. */\n\n\n  _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\n\n\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\n\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\n\nclass FlexibleConnectedPositionStrategy {\n  constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n    /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n\n    this._lastBoundingBoxSize = {\n      width: 0,\n      height: 0\n    };\n    /** Whether the overlay was pushed in a previous positioning. */\n\n    this._isPushed = false;\n    /** Whether the overlay can be pushed on-screen on the initial open. */\n\n    this._canPush = true;\n    /** Whether the overlay can grow via flexible width/height after the initial open. */\n\n    this._growAfterOpen = false;\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n    this._hasFlexibleDimensions = true;\n    /** Whether the overlay position is locked. */\n\n    this._positionLocked = false;\n    /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n\n    this._viewportMargin = 0;\n    /** The Scrollable containers used to check scrollable view properties on position change. */\n\n    this._scrollables = [];\n    /** Ordered list of preferred positions, from most to least desirable. */\n\n    this._preferredPositions = [];\n    /** Subject that emits whenever the position changes. */\n\n    this._positionChanges = new Subject();\n    /** Subscription to viewport size changes. */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Default offset for the overlay along the x axis. */\n\n    this._offsetX = 0;\n    /** Default offset for the overlay along the y axis. */\n\n    this._offsetY = 0;\n    /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n\n    this._appliedPanelClasses = [];\n    /** Observable sequence of position changes. */\n\n    this.positionChanges = this._positionChanges;\n    this.setOrigin(connectedTo);\n  }\n  /** Ordered list of preferred positions, from most to least desirable. */\n\n\n  get positions() {\n    return this._preferredPositions;\n  }\n  /** Attaches this position strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    if (this._overlayRef && overlayRef !== this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n\n    this._resizeSubscription.unsubscribe();\n\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n\n\n  apply() {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    } // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n\n\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n\n    this._resetOverlayElementStyles();\n\n    this._resetBoundingBoxStyles(); // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n\n\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect; // Positions where the overlay will fit with flexible dimensions.\n\n    const flexibleFits = []; // Fallback if none of the preferred positions fit within the viewport.\n\n    let fallback; // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos); // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n\n\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos); // Calculate how well the overlay would fit into the viewport with this point.\n\n\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos); // If the overlay, without any further work, fits into the viewport, use this position.\n\n\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n\n        this._applyPosition(pos, originPoint);\n\n        return;\n      } // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n\n\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n        continue;\n      } // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n\n\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {\n          overlayFit,\n          overlayPoint,\n          originPoint,\n          position: pos,\n          overlayRect\n        };\n      }\n    } // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n\n\n    if (flexibleFits.length) {\n      let bestFit = null;\n      let bestScore = -1;\n\n      for (const fit of flexibleFits) {\n        const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n\n      this._applyPosition(bestFit.position, bestFit.origin);\n\n      return;\n    } // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n\n\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n\n      this._applyPosition(fallback.position, fallback.originPoint);\n\n      return;\n    } // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n\n\n    this._applyPosition(fallback.position, fallback.originPoint);\n  }\n\n  detach() {\n    this._clearPanelClasses();\n\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n\n    this._resizeSubscription.unsubscribe();\n  }\n  /** Cleanup after the element gets destroyed. */\n\n\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    } // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n\n\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: ''\n      });\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n\n    this._positionChanges.complete();\n\n    this._overlayRef = this._boundingBox = null;\n    this._isDisposed = true;\n  }\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n\n\n  reapplyLastPosition() {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n\n\n  withScrollableContainers(scrollables) {\n    this._scrollables = scrollables;\n    return this;\n  }\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n\n\n  withPositions(positions) {\n    this._preferredPositions = positions; // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n\n    if (positions.indexOf(this._lastPosition) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n\n\n  withViewportMargin(margin) {\n    this._viewportMargin = margin;\n    return this;\n  }\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n\n\n  withFlexibleDimensions(flexibleDimensions = true) {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n\n\n  withGrowAfterOpen(growAfterOpen = true) {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n\n  withPush(canPush = true) {\n    this._canPush = canPush;\n    return this;\n  }\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n\n\n  withLockedPosition(isLocked = true) {\n    this._positionLocked = isLocked;\n    return this;\n  }\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n\n\n  setOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n\n\n  withDefaultOffsetX(offset) {\n    this._offsetX = offset;\n    return this;\n  }\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n\n\n  withDefaultOffsetY(offset) {\n    this._offsetY = offset;\n    return this;\n  }\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n\n\n  withTransformOriginOn(selector) {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n\n\n  _getOriginPoint(originRect, pos) {\n    let x;\n\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + originRect.width / 2;\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y;\n\n    if (pos.originY == 'center') {\n      y = originRect.top + originRect.height / 2;\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n\n\n  _getOverlayPoint(originPoint, overlayRect, pos) {\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX;\n\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY;\n\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    } // The (x, y) coordinates of the overlay.\n\n\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY\n    };\n  }\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n\n\n  _getOverlayFit(point, overlay, viewport, position) {\n    let {\n      x,\n      y\n    } = point;\n\n    let offsetX = this._getOffset(position, 'x');\n\n    let offsetY = this._getOffset(position, 'y'); // Account for the offsets since they could push the overlay out of the viewport.\n\n\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    } // How much the overlay would overflow at this position, on each side.\n\n\n    let leftOverflow = 0 - x;\n    let rightOverflow = x + overlay.width - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = y + overlay.height - viewport.height; // Visible parts of the element on each axis.\n\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n\n    let visibleArea = visibleWidth * visibleHeight;\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width\n    };\n  }\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n\n\n  _canFitWithFlexibleDimensions(fit, point, viewport) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n      const verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;\n      const horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;\n      return verticalFit && horizontalFit;\n    }\n\n    return false;\n  }\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param overlay Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n\n\n  _pushOverlayOnScreen(start, overlay, scrollPosition) {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    }\n\n    const viewport = this._viewportRect; // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0); // Amount by which to push the overlay in each axis such that it remains on-screen.\n\n    let pushX = 0;\n    let pushY = 0; // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;\n    }\n\n    this._previousPushAmount = {\n      x: pushX,\n      y: pushY\n    };\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY\n    };\n  }\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n\n\n  _applyPosition(position, originPoint) {\n    this._setTransformOrigin(position);\n\n    this._setOverlayElementStyles(originPoint, position);\n\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    } // Save the last connected position in case the position needs to be re-calculated.\n\n\n    this._lastPosition = position; // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n\n\n  _setTransformOrigin(position) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n\n    let xOrigin;\n    let yOrigin = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n\n\n  _calculateBoundingBoxRect(origin, position) {\n    const viewport = this._viewportRect;\n\n    const isRtl = this._isRtl();\n\n    let height, top, bottom;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n      const previousHeight = this._lastBoundingBoxSize.height;\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - previousHeight / 2;\n      }\n    } // The overlay is opening 'right-ward' (the content flows to the right).\n\n\n    const isBoundedByRightViewportEdge = position.overlayX === 'start' && !isRtl || position.overlayX === 'end' && isRtl; // The overlay is opening 'left-ward' (the content flows to the left).\n\n    const isBoundedByLeftViewportEdge = position.overlayX === 'end' && !isRtl || position.overlayX === 'start' && isRtl;\n    let width, left, right;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - previousWidth / 2;\n      }\n    }\n\n    return {\n      top: top,\n      left: left,\n      bottom: bottom,\n      right: right,\n      width,\n      height\n    };\n  }\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n\n\n  _setBoundingBoxStyles(origin, position) {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position); // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n\n\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {};\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right); // Push the pane content towards the proper direction.\n\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n    extendStyles(this._boundingBox.style, styles);\n  }\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n\n\n  _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: ''\n    });\n  }\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n\n\n  _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: ''\n    });\n  }\n  /** Sets positioning styles to the overlay element. */\n\n\n  _setOverlayElementStyles(originPoint, position) {\n    const styles = {};\n\n    const hasExactPosition = this._hasExactPosition();\n\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n\n    const config = this._overlayRef.getConfig();\n\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    } // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n\n\n    let transformString = '';\n\n    let offsetX = this._getOffset(position, 'x');\n\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim(); // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n\n\n  _getExactOverlayY(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {\n      top: '',\n      bottom: ''\n    };\n\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top; // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n\n\n    overlayPoint.y -= virtualKeyboardOffset; // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n\n\n  _getExactOverlayX(position, originPoint, scrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {\n      left: '',\n      right: ''\n    };\n\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    } // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n\n\n    let horizontalStyleProperty;\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    } // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n\n\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n\n\n  _getScrollVisibility() {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n\n    const overlayBounds = this._pane.getBoundingClientRect(); // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n\n\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)\n    };\n  }\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n\n\n  _subtractOverflows(length, ...overflows) {\n    return overflows.reduce((currentValue, currentOverflow) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n\n\n  _getNarrowedViewportRect() {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement.clientWidth;\n    const height = this._document.documentElement.clientHeight;\n\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top: scrollPosition.top + this._viewportMargin,\n      left: scrollPosition.left + this._viewportMargin,\n      right: scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width: width - 2 * this._viewportMargin,\n      height: height - 2 * this._viewportMargin\n    };\n  }\n  /** Whether the we're dealing with an RTL context */\n\n\n  _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n  /** Determines whether the overlay uses exact or flexible positioning. */\n\n\n  _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n  /** Retrieves the offset of a position along the x or y axis. */\n\n\n  _getOffset(position, axis) {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n  /** Validates that the current position match the expected values. */\n\n\n  _validatePositions() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      } // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n\n\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n\n\n  _addPanelClasses(cssClasses) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n\n\n  _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n\n      this._appliedPanelClasses = [];\n    }\n  }\n  /** Returns the ClientRect of the current origin. */\n\n\n  _getOriginRect() {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    } // Check for Element so SVG elements are also supported.\n\n\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0; // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width\n    };\n  }\n\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\n\n\nfunction extendStyles(destination, source) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\n\n\nfunction getPixelValue(input) {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return !units || units === 'px' ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\n\n\nclass ConnectedPositionStrategy {\n  constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n    /** Ordered list of preferred positions, from most to least desirable. */\n    this._preferredPositions = []; // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer).withFlexibleDimensions(false).withPush(false).withViewportMargin(0);\n    this.withFallbackPosition(originPos, overlayPos);\n    this.onPositionChange = this._positionStrategy.positionChanges;\n  }\n  /** Ordered list of preferred positions, from most to least desirable. */\n\n\n  get positions() {\n    return this._preferredPositions;\n  }\n  /** Attach this position strategy to an overlay. */\n\n\n  attach(overlayRef) {\n    this._overlayRef = overlayRef;\n\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n  /** Disposes all resources used by the position strategy. */\n\n\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n  /** @docs-private */\n\n\n  detach() {\n    this._positionStrategy.detach();\n  }\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n\n\n  apply() {\n    this._positionStrategy.apply();\n  }\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n\n\n  recalculateLastPosition() {\n    this._positionStrategy.reapplyLastPosition();\n  }\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n\n\n  withScrollableContainers(scrollables) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n\n\n  withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n\n    this._preferredPositions.push(position);\n\n    this._positionStrategy.withPositions(this._preferredPositions);\n\n    return this;\n  }\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n\n\n  withDirection(dir) {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n\n\n  withOffsetX(offset) {\n    this._positionStrategy.withDefaultOffsetX(offset);\n\n    return this;\n  }\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n\n\n  withOffsetY(offset) {\n    this._positionStrategy.withDefaultOffsetY(offset);\n\n    return this;\n  }\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n\n\n  withLockedPosition(isLocked) {\n    this._positionStrategy.withLockedPosition(isLocked);\n\n    return this;\n  }\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n\n\n  withPositions(positions) {\n    this._preferredPositions = positions.slice();\n\n    this._positionStrategy.withPositions(this._preferredPositions);\n\n    return this;\n  }\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n\n\n  setOrigin(origin) {\n    this._positionStrategy.setOrigin(origin);\n\n    return this;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Class to be added to the overlay pane wrapper. */\n\n\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\n\nclass GlobalPositionStrategy {\n  constructor() {\n    this._cssPosition = 'static';\n    this._topOffset = '';\n    this._bottomOffset = '';\n    this._leftOffset = '';\n    this._rightOffset = '';\n    this._alignItems = '';\n    this._justifyContent = '';\n    this._width = '';\n    this._height = '';\n  }\n\n  attach(overlayRef) {\n    const config = overlayRef.getConfig();\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({\n        width: this._width\n      });\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({\n        height: this._height\n      });\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n\n\n  top(value = '') {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n\n\n  left(value = '') {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n\n\n  bottom(value = '') {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n\n\n  right(value = '') {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n\n\n  width(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({\n        width: value\n      });\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n\n\n  height(value = '') {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({\n        height: value\n      });\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n\n\n  centerHorizontally(offset = '') {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n\n\n  centerVertically(offset = '') {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n\n\n  apply() {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n\n    const config = this._overlayRef.getConfig();\n\n    const {\n      width,\n      height,\n      maxWidth,\n      maxHeight\n    } = config;\n    const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') && (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically = (height === '100%' || height === '100vh') && (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (shouldBeFlushHorizontally) {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n\n\n  dispose() {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n    this._overlayRef = null;\n    this._isDisposed = true;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Builder for overlay position strategy. */\n\n\nclass OverlayPositionBuilder {\n  constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n    this._viewportRuler = _viewportRuler;\n    this._document = _document;\n    this._platform = _platform;\n    this._overlayContainer = _overlayContainer;\n  }\n  /**\n   * Creates a global position strategy.\n   */\n\n\n  global() {\n    return new GlobalPositionStrategy();\n  }\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 8.0.0\n   */\n\n\n  connectedTo(elementRef, originPos, overlayPos) {\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n  }\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n\n\n  flexibleConnectedTo(origin) {\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n  }\n\n}\n\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) {\n  return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer));\n};\n\nOverlayPositionBuilder.ɵprov = ɵɵdefineInjectable({\n  factory: function OverlayPositionBuilder_Factory() {\n    return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer));\n  },\n  token: OverlayPositionBuilder,\n  providedIn: \"root\"\n});\n\nOverlayPositionBuilder.ctorParameters = () => [{\n  type: ViewportRuler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}, {\n  type: OverlayContainer\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }, {\n      type: OverlayContainer\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Next overlay unique ID. */\n\n\nlet nextUniqueId = 0; // Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n\nclass Overlay {\n  constructor(\n  /** Scrolling strategies that can be used when creating an overlay. */\n  scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location, _outsideClickDispatcher) {\n    this.scrollStrategies = scrollStrategies;\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._positionBuilder = _positionBuilder;\n    this._keyboardDispatcher = _keyboardDispatcher;\n    this._injector = _injector;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._directionality = _directionality;\n    this._location = _location;\n    this._outsideClickDispatcher = _outsideClickDispatcher;\n  }\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n\n\n  create(config) {\n    const host = this._createHostElement();\n\n    const pane = this._createPaneElement(host);\n\n    const portalOutlet = this._createPortalOutlet(pane);\n\n    const overlayConfig = new OverlayConfig(config);\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n  }\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n\n\n  position() {\n    return this._positionBuilder;\n  }\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n\n\n  _createPaneElement(host) {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n    return pane;\n  }\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n\n\n  _createHostElement() {\n    const host = this._document.createElement('div');\n\n    this._overlayContainer.getContainerElement().appendChild(host);\n\n    return host;\n  }\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n\n\n  _createPortalOutlet(pane) {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n  }\n\n}\n\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher));\n};\n\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac\n});\n\nOverlay.ctorParameters = () => [{\n  type: ScrollStrategyOptions\n}, {\n  type: OverlayContainer\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: OverlayPositionBuilder\n}, {\n  type: OverlayKeyboardDispatcher\n}, {\n  type: Injector\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Directionality\n}, {\n  type: Location\n}, {\n  type: OverlayOutsideClickDispatcher\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ScrollStrategyOptions\n    }, {\n      type: OverlayContainer\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: OverlayPositionBuilder\n    }, {\n      type: OverlayKeyboardDispatcher\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc3.Directionality\n    }, {\n      type: ɵngcc4.Location\n    }, {\n      type: OverlayOutsideClickDispatcher\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\n\n\nconst defaultPositionList = [{\n  originX: 'start',\n  originY: 'bottom',\n  overlayX: 'start',\n  overlayY: 'top'\n}, {\n  originX: 'start',\n  originY: 'top',\n  overlayX: 'start',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'top',\n  overlayX: 'end',\n  overlayY: 'bottom'\n}, {\n  originX: 'end',\n  originY: 'bottom',\n  overlayX: 'end',\n  overlayY: 'top'\n}];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\n\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n\nclass CdkOverlayOrigin {\n  constructor(\n  /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    this.elementRef = elementRef;\n  }\n\n}\n\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) {\n  return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkOverlayOrigin,\n  selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]],\n  exportAs: [\"cdkOverlayOrigin\"]\n});\n\nCdkOverlayOrigin.ctorParameters = () => [{\n  type: ElementRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n      exportAs: 'cdkOverlayOrigin'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n\n\nclass CdkConnectedOverlay {\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n  constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n    this._overlay = _overlay;\n    this._dir = _dir;\n    this._hasBackdrop = false;\n    this._lockPosition = false;\n    this._growAfterOpen = false;\n    this._flexibleDimensions = false;\n    this._push = false;\n    this._backdropSubscription = Subscription.EMPTY;\n    this._attachSubscription = Subscription.EMPTY;\n    this._detachSubscription = Subscription.EMPTY;\n    this._positionSubscription = Subscription.EMPTY;\n    /** Margin between the overlay and the viewport edges. */\n\n    this.viewportMargin = 0;\n    /** Whether the overlay is open. */\n\n    this.open = false;\n    /** Whether the overlay can be closed by user interaction. */\n\n    this.disableClose = false;\n    /** Event emitted when the backdrop is clicked. */\n\n    this.backdropClick = new EventEmitter();\n    /** Event emitted when the position has changed. */\n\n    this.positionChange = new EventEmitter();\n    /** Event emitted when the overlay has been attached. */\n\n    this.attach = new EventEmitter();\n    /** Event emitted when the overlay has been detached. */\n\n    this.detach = new EventEmitter();\n    /** Emits when there are keyboard events that are targeted at the overlay. */\n\n    this.overlayKeydown = new EventEmitter();\n    /** Emits when there are mouse outside click events that are targeted at the overlay. */\n\n    this.overlayOutsideClick = new EventEmitter();\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n  /** The offset in pixels for the overlay connection point on the x-axis */\n\n\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  set offsetX(offsetX) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n  /** The offset in pixels for the overlay connection point on the y-axis */\n\n\n  get offsetY() {\n    return this._offsetY;\n  }\n\n  set offsetY(offsetY) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n  /** Whether or not the overlay should attach a backdrop. */\n\n\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  /** Whether or not the overlay should be locked when scrolling. */\n\n\n  get lockPosition() {\n    return this._lockPosition;\n  }\n\n  set lockPosition(value) {\n    this._lockPosition = coerceBooleanProperty(value);\n  }\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n\n\n  get flexibleDimensions() {\n    return this._flexibleDimensions;\n  }\n\n  set flexibleDimensions(value) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n\n\n  get growAfterOpen() {\n    return this._growAfterOpen;\n  }\n\n  set growAfterOpen(value) {\n    this._growAfterOpen = coerceBooleanProperty(value);\n  }\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n\n\n  get push() {\n    return this._push;\n  }\n\n  set push(value) {\n    this._push = coerceBooleanProperty(value);\n  }\n  /** The associated overlay reference. */\n\n\n  get overlayRef() {\n    return this._overlayRef;\n  }\n  /** The element's layout direction. */\n\n\n  get dir() {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._attachSubscription.unsubscribe();\n\n    this._detachSubscription.unsubscribe();\n\n    this._backdropSubscription.unsubscribe();\n\n    this._positionSubscription.unsubscribe();\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n  /** Creates an overlay */\n\n\n  _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n    overlayRef.keydownEvents().subscribe(event => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n\n        this._detachOverlay();\n      }\n    });\n\n    this._overlayRef.outsidePointerEvents().subscribe(event => {\n      this.overlayOutsideClick.next(event);\n    });\n  }\n  /** Builds the overlay config based on the directive's inputs */\n\n\n  _buildConfig() {\n    const positionStrategy = this._position = this.positionStrategy || this._createPositionStrategy();\n\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n\n\n  _updatePositionStrategy(positionStrategy) {\n    const positions = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined\n    }));\n    return positionStrategy.setOrigin(this.origin.elementRef).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition).withTransformOriginOn(this.transformOriginSelector);\n  }\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n\n\n  _createPositionStrategy() {\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n\n    this._updatePositionStrategy(strategy);\n\n    return strategy;\n  }\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n\n\n  _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    this._positionSubscription.unsubscribe(); // Only subscribe to `positionChanges` if requested, because putting\n    // together all the information for it can be expensive.\n\n\n    if (this.positionChange.observers.length > 0) {\n      this._positionSubscription = this._position.positionChanges.pipe(takeWhile(() => this.positionChange.observers.length > 0)).subscribe(position => {\n        this.positionChange.emit(position);\n\n        if (this.positionChange.observers.length === 0) {\n          this._positionSubscription.unsubscribe();\n        }\n      });\n    }\n  }\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n\n\n  _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n    }\n\n    this._backdropSubscription.unsubscribe();\n\n    this._positionSubscription.unsubscribe();\n  }\n\n}\n\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) {\n  return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkConnectedOverlay,\n  selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]],\n  inputs: {\n    viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"],\n    open: [\"cdkConnectedOverlayOpen\", \"open\"],\n    disableClose: [\"cdkConnectedOverlayDisableClose\", \"disableClose\"],\n    scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"],\n    offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"],\n    offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"],\n    hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"],\n    lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"],\n    flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"],\n    growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"],\n    push: [\"cdkConnectedOverlayPush\", \"push\"],\n    positions: [\"cdkConnectedOverlayPositions\", \"positions\"],\n    origin: [\"cdkConnectedOverlayOrigin\", \"origin\"],\n    positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"],\n    width: [\"cdkConnectedOverlayWidth\", \"width\"],\n    height: [\"cdkConnectedOverlayHeight\", \"height\"],\n    minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"],\n    minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"],\n    backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"],\n    panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"],\n    transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"]\n  },\n  outputs: {\n    backdropClick: \"backdropClick\",\n    positionChange: \"positionChange\",\n    attach: \"attach\",\n    detach: \"detach\",\n    overlayKeydown: \"overlayKeydown\",\n    overlayOutsideClick: \"overlayOutsideClick\"\n  },\n  exportAs: [\"cdkConnectedOverlay\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nCdkConnectedOverlay.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: TemplateRef\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\nCdkConnectedOverlay.propDecorators = {\n  origin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOrigin']\n  }],\n  positions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPositions']\n  }],\n  positionStrategy: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPositionStrategy']\n  }],\n  offsetX: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetX']\n  }],\n  offsetY: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOffsetY']\n  }],\n  width: [{\n    type: Input,\n    args: ['cdkConnectedOverlayWidth']\n  }],\n  height: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHeight']\n  }],\n  minWidth: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinWidth']\n  }],\n  minHeight: [{\n    type: Input,\n    args: ['cdkConnectedOverlayMinHeight']\n  }],\n  backdropClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayBackdropClass']\n  }],\n  panelClass: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPanelClass']\n  }],\n  viewportMargin: [{\n    type: Input,\n    args: ['cdkConnectedOverlayViewportMargin']\n  }],\n  scrollStrategy: [{\n    type: Input,\n    args: ['cdkConnectedOverlayScrollStrategy']\n  }],\n  open: [{\n    type: Input,\n    args: ['cdkConnectedOverlayOpen']\n  }],\n  disableClose: [{\n    type: Input,\n    args: ['cdkConnectedOverlayDisableClose']\n  }],\n  transformOriginSelector: [{\n    type: Input,\n    args: ['cdkConnectedOverlayTransformOriginOn']\n  }],\n  hasBackdrop: [{\n    type: Input,\n    args: ['cdkConnectedOverlayHasBackdrop']\n  }],\n  lockPosition: [{\n    type: Input,\n    args: ['cdkConnectedOverlayLockPosition']\n  }],\n  flexibleDimensions: [{\n    type: Input,\n    args: ['cdkConnectedOverlayFlexibleDimensions']\n  }],\n  growAfterOpen: [{\n    type: Input,\n    args: ['cdkConnectedOverlayGrowAfterOpen']\n  }],\n  push: [{\n    type: Input,\n    args: ['cdkConnectedOverlayPush']\n  }],\n  backdropClick: [{\n    type: Output\n  }],\n  positionChange: [{\n    type: Output\n  }],\n  attach: [{\n    type: Output\n  }],\n  detach: [{\n    type: Output\n  }],\n  overlayKeydown: [{\n    type: Output\n  }],\n  overlayOutsideClick: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n      exportAs: 'cdkConnectedOverlay'\n    }]\n  }], function () {\n    return [{\n      type: Overlay\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    viewportMargin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayViewportMargin']\n    }],\n    open: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOpen']\n    }],\n    disableClose: [{\n      type: Input,\n      args: ['cdkConnectedOverlayDisableClose']\n    }],\n    backdropClick: [{\n      type: Output\n    }],\n    positionChange: [{\n      type: Output\n    }],\n    attach: [{\n      type: Output\n    }],\n    detach: [{\n      type: Output\n    }],\n    overlayKeydown: [{\n      type: Output\n    }],\n    overlayOutsideClick: [{\n      type: Output\n    }],\n    scrollStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayScrollStrategy']\n    }],\n    offsetX: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetX']\n    }],\n    offsetY: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOffsetY']\n    }],\n    hasBackdrop: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHasBackdrop']\n    }],\n    lockPosition: [{\n      type: Input,\n      args: ['cdkConnectedOverlayLockPosition']\n    }],\n    flexibleDimensions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayFlexibleDimensions']\n    }],\n    growAfterOpen: [{\n      type: Input,\n      args: ['cdkConnectedOverlayGrowAfterOpen']\n    }],\n    push: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPush']\n    }],\n    positions: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositions']\n    }],\n    origin: [{\n      type: Input,\n      args: ['cdkConnectedOverlayOrigin']\n    }],\n    positionStrategy: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPositionStrategy']\n    }],\n    width: [{\n      type: Input,\n      args: ['cdkConnectedOverlayWidth']\n    }],\n    height: [{\n      type: Input,\n      args: ['cdkConnectedOverlayHeight']\n    }],\n    minWidth: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinWidth']\n    }],\n    minHeight: [{\n      type: Input,\n      args: ['cdkConnectedOverlayMinHeight']\n    }],\n    backdropClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayBackdropClass']\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['cdkConnectedOverlayPanelClass']\n    }],\n    transformOriginSelector: [{\n      type: Input,\n      args: ['cdkConnectedOverlayTransformOriginOn']\n    }]\n  });\n})();\n/** @docs-private */\n\n\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\n\n\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass OverlayModule {}\n\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: OverlayModule\n});\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function OverlayModule_Factory(t) {\n    return new (t || OverlayModule)();\n  },\n  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],\n  imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, {\n    declarations: function () {\n      return [CdkConnectedOverlay, CdkOverlayOrigin];\n    },\n    imports: function () {\n      return [BidiModule, PortalModule, ScrollingModule];\n    },\n    exports: function () {\n      return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PortalModule, ScrollingModule],\n      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n      declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n\n\nclass FullscreenOverlayContainer extends OverlayContainer {\n  constructor(_document, platform) {\n    super(_document, platform);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  _createContainer() {\n    super._createContainer();\n\n    this._adjustParentForFullscreenChange();\n\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  _adjustParentForFullscreenChange() {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  _addFullscreenChangeListener(fn) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n\n      this._fullScreenListener = fn;\n    }\n  }\n\n  _getEventName() {\n    if (!this._fullScreenEventName) {\n      const _document = this._document;\n\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n\n\n  getFullscreenElement() {\n    const _document = this._document;\n    return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;\n  }\n\n}\n\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) {\n  return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform));\n};\n\nFullscreenOverlayContainer.ɵprov = ɵɵdefineInjectable({\n  factory: function FullscreenOverlayContainer_Factory() {\n    return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform));\n  },\n  token: FullscreenOverlayContainer,\n  providedIn: \"root\"\n});\n\nFullscreenOverlayContainer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d };","map":{"version":3,"sources":["../../../../../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../../../../../src/cdk/overlay/scroll/scroll-strategy.ts","../../../../../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../../../../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../../../../../src/cdk/overlay/position/scroll-clip.ts","../../../../../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../../../../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../../../../../src/cdk/overlay/scroll/index.ts","../../../../../../src/cdk/overlay/overlay-config.ts","../../../../../../src/cdk/overlay/position/connected-position.ts","../../../../../../src/cdk/overlay/dispatchers/base-overlay-dispatcher.ts","../../../../../../src/cdk/overlay/dispatchers/overlay-keyboard-dispatcher.ts","../../../../../../src/cdk/overlay/dispatchers/overlay-outside-click-dispatcher.ts","../../../../../../src/cdk/overlay/overlay-container.ts","../../../../../../src/cdk/overlay/overlay-ref.ts","../../../../../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../../../../../src/cdk/overlay/position/connected-position-strategy.ts","../../../../../../src/cdk/overlay/position/global-position-strategy.ts","../../../../../../src/cdk/overlay/position/overlay-position-builder.ts","../../../../../../src/cdk/overlay/overlay.ts","../../../../../../src/cdk/overlay/overlay-directives.ts","../../../../../../src/cdk/overlay/overlay-module.ts","../../../../../../src/cdk/overlay/dispatchers/index.ts","../../../../../../src/cdk/overlay/fullscreen-overlay-container.ts","../../../../../../src/cdk/overlay/public-api.ts","../../../../../../src/cdk/overlay/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\n\n/**\n * Extended `CSSStyleDeclaration` that includes `scrollBehavior` which isn't part of the\n * built-in TS typings. Once it is, this declaration can be removed safely.\n * @docs-private\n */\ntype ScrollBehaviorCSSStyleDeclaration = CSSStyleDeclaration & {scrollBehavior: string};\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: { top: number, left: number };\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() { }\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style as ScrollBehaviorCSSStyleDeclaration;\n      const bodyStyle = body.style as ScrollBehaviorCSSStyleDeclaration;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n      bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayReference) => void;\n\n  /** Detaches the scroll strategy from the current overlay. */\n  detach?: () => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\n\n// Export pre-defined scroll strategies and interface to build custom ones.\nexport {ScrollStrategy} from './scroll-strategy';\nexport {ScrollStrategyOptions} from './scroll-strategy-options';\nexport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig\n} from './reposition-scroll-strategy';\nexport {CloseScrollStrategy} from './close-scroll-strategy';\nexport {NoopScrollStrategy} from './noop-scroll-strategy';\nexport {BlockScrollStrategy} from './block-scroll-strategy';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys =\n          Object.keys(config) as Iterable<keyof OverlayConfig> & (keyof OverlayConfig)[];\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key] as any;\n        }\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[]) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {OverlayReference} from '../overlay-reference';\n\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport abstract class BaseOverlayDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayReference[] = [];\n\n  protected _document: Document;\n  protected _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy(): void {\n    this.detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayReference): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayReference): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this.detach();\n    }\n  }\n\n  /** Detaches the global event listener. */\n  protected abstract detach(): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {OverlayReference} from '../overlay-reference';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    super(document);\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayReference): void {\n    super.add(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener);\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEvents.observers.length > 0) {\n        overlays[i]._keydownEvents.next(event);\n        break;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {OverlayReference} from '../overlay-reference';\nimport {Platform} from '@angular/cdk/platform';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n  private _cursorOriginalValue: string;\n  private _cursorStyleIsSet = false;\n\n  constructor(@Inject(DOCUMENT) document: any, private _platform: Platform) {\n    super(document);\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayReference): void {\n    super.add(overlayRef);\n\n    // tslint:disable: max-line-length\n    // Safari on iOS does not generate click events for non-interactive\n    // elements. However, we want to receive a click for any element outside\n    // the overlay. We can force a \"clickable\" state by setting\n    // `cursor: pointer` on the document body.\n    // See https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n    // and https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n    // tslint:enable: max-line-length\n    if (!this._isAttached) {\n      this._document.body.addEventListener('click', this._clickListener, true);\n      this._document.body.addEventListener('contextmenu', this._clickListener, true);\n\n      // click event is not fired on iOS. To make element \"clickable\" we are\n      // setting the cursor to pointer\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\n        this._cursorOriginalValue = this._document.body.style.cursor;\n        this._document.body.style.cursor = 'pointer';\n        this._cursorStyleIsSet = true;\n      }\n\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('click', this._clickListener, true);\n      this._document.body.removeEventListener('contextmenu', this._clickListener, true);\n      if (this._platform.IOS && this._cursorStyleIsSet) {\n        this._document.body.style.cursor = this._cursorOriginalValue;\n        this._cursorStyleIsSet = false;\n      }\n      this._isAttached = false;\n    }\n  }\n\n  /** Click event listener that will be attached to the body propagate phase. */\n  private _clickListener = (event: MouseEvent) => {\n    // Get the target through the `composedPath` if possible to account for shadow DOM.\n    const target = event.composedPath ? event.composedPath()[0] : event.target;\n    // We copy the array because the original may be modified asynchronously if the\n    // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n    // the for loop.\n    const overlays = this._attachedOverlays.slice();\n\n    // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n    // We want to target all overlays for which the click could be considered as outside click.\n    // As soon as we reach an overlay for which the click is not outside click we break off\n    // the loop.\n    for (let i = overlays.length - 1; i > -1; i--) {\n      const overlayRef = overlays[i];\n      if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n        continue;\n      }\n\n      // If it's a click inside the overlay, just break - we should do nothing\n      // If it's an outside click dispatch the mouse event, and proceed with the next overlay\n      if (overlayRef.overlayElement.contains(target as Node)) {\n        break;\n      }\n\n      overlayRef._outsidePointerEvents.next(event);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nconst isTestEnvironment: boolean = typeof window !== 'undefined' && !!window &&\n  !!((window as any).__karma__ || (window as any).jasmine);\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n  protected _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any, protected _platform: Platform) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    const container = this._containerElement;\n\n    if (container && container.parentNode) {\n      container.parentNode.removeChild(container);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const containerClass = 'cdk-overlay-container';\n\n    if (this._platform.isBrowser || isTestEnvironment) {\n      const oppositePlatformContainers =\n          this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                                          `.${containerClass}[platform=\"test\"]`);\n\n      // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].parentNode!.removeChild(oppositePlatformContainers[i]);\n      }\n    }\n\n    const container = this._document.createElement('div');\n    container.classList.add(containerClass);\n\n    // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n    if (isTestEnvironment) {\n      container.setAttribute('platform', 'test');\n    } else if (!this._platform.isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, merge, SubscriptionLike, Subscription} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {OverlayReference} from './overlay-reference';\nimport {PositionStrategy} from './position/position-strategy';\nimport {ScrollStrategy} from './scroll';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet, OverlayReference {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n  private _positionStrategy: PositionStrategy | undefined;\n  private _scrollStrategy: ScrollStrategy | undefined;\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n  private _backdropClickHandler = (event: MouseEvent) => this._backdropClick.next(event);\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Stream of mouse outside events dispatched to this overlay. */\n  _outsidePointerEvents = new Subject<MouseEvent>();\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document,\n      private _location: Location,\n      private _outsideClickDispatcher: OverlayOutsideClickDispatcher) {\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    // Update the pane element with the given configuration.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    this._outsideClickDispatcher.add(this);\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n    this._locationChanges.unsubscribe();\n    this._outsideClickDispatcher.remove(this);\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n    this.detachBackdrop();\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n    this._outsidePointerEvents.complete();\n    this._outsideClickDispatcher.remove(this);\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    this._previousHostParent = this._pane = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick;\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments;\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments;\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEvents;\n  }\n\n  /** Gets an observable of pointer events targeted outside this overlay. */\n  outsidePointerEvents(): Observable<MouseEvent> {\n    return this._outsidePointerEvents;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition(): void {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy: PositionStrategy): void {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig): void {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality): void {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Switches to a new scroll strategy. */\n  updateScrollStrategy(strategy: ScrollStrategy): void {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', this._backdropClickHandler);\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    let timeoutId: number;\n    let finishDetach = () => {\n      // It may not be attached to anything in certain cases (e.g. unit tests).\n      if (backdropToDetach) {\n        backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n        backdropToDetach.removeEventListener('transitionend', finishDetach);\n\n        if (backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n      }\n\n      // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n      if (this._backdropElement == backdropToDetach) {\n        this._backdropElement = null;\n      }\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach!, this._config.backdropClass, false);\n      }\n\n      clearTimeout(timeoutId);\n    };\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach!.addEventListener('transitionend', finishDetach);\n    });\n\n    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n    backdropToDetach.style.pointerEvents = 'none';\n\n    // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n    timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classList = element.classList;\n\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      // Also trying to add an empty string to a DOMTokenList will throw.\n      if (cssClass) {\n        isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n      }\n    });\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  private _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._previousHostParent.removeChild(this._host);\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n\n  /** Disposes of a scroll strategy. */\n  private _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {OverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/** Possible values that can be set as the origin of a FlexibleConnectedPositionStrategy. */\nexport type FlexibleConnectedPositionStrategyOrigin = ElementRef | Element | Point & {\n  width?: number;\n  height?: number;\n};\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender: boolean;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private _scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: FlexibleConnectedPositionStrategyOrigin;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n  private _appliedPanelClasses: string[] = [];\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number, y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> = this._positionChanges;\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  constructor(\n      connectedTo: FlexibleConnectedPositionStrategyOrigin, private _viewportRuler: ViewportRuler,\n      private _document: Document, private _platform: Platform,\n      private _overlayContainer: OverlayContainer) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach(): void {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      } as CSSStyleDeclaration);\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null!;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]): this {\n    this._scrollables = scrollables;\n    return this;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n  setOrigin(origin: FlexibleConnectedPositionStrategyOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, overlay: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param overlay Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point,\n                               overlay: ClientRect,\n                               scrollPosition: ViewportScrollPosition): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    }\n\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> =\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height: number, top: number, bottom: number;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !isRtl) ||\n        (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !isRtl) ||\n        (position.overlayX === 'start' && isRtl);\n\n    let width: number, left: number, right: number;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n    const hasExactPosition = this._hasExactPosition();\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n    const config = this._overlayRef.getConfig();\n\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: '', bottom: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    let virtualKeyboardOffset =\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    overlayPoint.y -= virtualKeyboardOffset;\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement!.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: '', right: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement!.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement!.clientWidth;\n    const height = this._document.documentElement!.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      }\n\n      // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  private _addPanelClasses(cssClasses: string | string[]) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  private _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n      this._appliedPanelClasses = [];\n    }\n  }\n\n  /** Returns the ClientRect of the current origin. */\n  private _getOriginRect(): ClientRect {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    }\n\n    // Check for Element so SVG elements are also supported.\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0;\n\n    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width\n    };\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n  panelClass?: string | string[];\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination: CSSStyleDeclaration,\n                      source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n\n\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input: number|string|null|undefined): number|null {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return (!units || units === 'px') ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\nimport {ElementRef} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {OverlayContainer} from '../overlay-container';\nimport {OverlayReference} from '../overlay-reference';\n\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {PositionStrategy} from './position-strategy';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  private _direction: Direction | null;\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  readonly onPositionChange: Observable<ConnectedOverlayPositionChange>;\n\n  constructor(\n      originPos: OriginConnectionPosition, overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef<HTMLElement>, viewportRuler: ViewportRuler, document: Document,\n      platform: Platform, overlayContainer: OverlayContainer) {\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(\n                                 connectedTo, viewportRuler, document, platform, overlayContainer)\n                                 .withFlexibleDimensions(false)\n                                 .withPush(false)\n                                 .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n    this.onPositionChange = this._positionStrategy.positionChanges;\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayReference} from '../overlay-reference';\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n  private _isDisposed: boolean;\n\n  attach(overlayRef: OverlayReference): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n    const {width, height, maxWidth, maxHeight} = config;\n    const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n                                      (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n                                    (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (shouldBeFlushHorizontally) {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose(): void {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n      styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n\n    this._overlayRef = null!;\n    this._isDisposed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable} from '@angular/core';\n\nimport {OverlayContainer} from '../overlay-container';\n\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n      private _viewportRuler: ViewportRuler, @Inject(DOCUMENT) private _document: any,\n      private _platform: Platform, private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 8.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(\n        originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform,\n        this._overlayContainer);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n  flexibleConnectedTo(origin: FlexibleConnectedPositionStrategyOrigin):\n    FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document,\n        this._platform, this._overlayContainer);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT, Location} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality,\n              private _location: Location,\n              private _outsideClickDispatcher: OverlayOutsideClickDispatcher) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector,\n                               this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {takeWhile} from 'rxjs/operators';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _growAfterOpen = false;\n  private _flexibleDimensions = false;\n  private _push = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _attachSubscription = Subscription.EMPTY;\n  private _detachSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /**\n   * This input overrides the positions input if specified. It lets users pass\n   * in arbitrary positioning strategies.\n   */\n  @Input('cdkConnectedOverlayPositionStrategy') positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** The custom class to add to the overlay pane element. */\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether the overlay can be closed by user interaction. */\n  @Input('cdkConnectedOverlayDisableClose') disableClose: boolean = false;\n\n  /** CSS selector which to set the transform origin. */\n  @Input('cdkConnectedOverlayTransformOriginOn') transformOriginSelector: string;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input('cdkConnectedOverlayFlexibleDimensions')\n  get flexibleDimensions() { return this._flexibleDimensions; }\n  set flexibleDimensions(value: boolean) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input('cdkConnectedOverlayGrowAfterOpen')\n  get growAfterOpen() { return this._growAfterOpen; }\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input('cdkConnectedOverlayPush')\n  get push() { return this._push; }\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  /** Emits when there are mouse outside click events that are targeted at the overlay. */\n  @Output() overlayOutsideClick = new EventEmitter<MouseEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) scrollStrategyFactory: any,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._attachSubscription.unsubscribe();\n    this._detachSubscription.unsubscribe();\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n    overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this._detachOverlay();\n      }\n    });\n\n    this._overlayRef.outsidePointerEvents().subscribe((event: MouseEvent) => {\n      this.overlayOutsideClick.next(event);\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position =\n      this.positionStrategy || this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined,\n    }));\n\n    return positionStrategy\n      .setOrigin(this.origin.elementRef)\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition)\n      .withTransformOriginOn(this.transformOriginSelector);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n    this._updatePositionStrategy(strategy);\n    return strategy;\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    this._positionSubscription.unsubscribe();\n\n    // Only subscribe to `positionChanges` if requested, because putting\n    // together all the information for it can be expensive.\n    if (this.positionChange.observers.length > 0) {\n      this._positionSubscription = this._position.positionChanges\n        .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n        .subscribe(position => {\n          this.positionChange.emit(position);\n\n          if (this.positionChange.observers.length === 0) {\n            this._positionSubscription.unsubscribe();\n          }\n        });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n    }\n\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n  }\n\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n  static ngAcceptInputType_lockPosition: BooleanInput;\n  static ngAcceptInputType_flexibleDimensions: BooleanInput;\n  static ngAcceptInputType_growAfterOpen: BooleanInput;\n  static ngAcceptInputType_push: BooleanInput;\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {NgModule} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollingModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [\n    Overlay,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class OverlayModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {OverlayOutsideClickDispatcher} from './overlay-outside-click-dispatcher';\nexport {OverlayKeyboardDispatcher} from './overlay-keyboard-dispatcher';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\nimport {Platform} from '@angular/cdk/platform';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable({providedIn: 'root'})\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any, platform: Platform) {\n    super(_document, platform);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      const _document = this._document as any;\n\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    const _document = this._document as any;\n\n    return _document.fullscreenElement ||\n           _document.webkitFullscreenElement ||\n           _document.mozFullScreenElement ||\n           _document.msFullscreenElement ||\n           null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './overlay-config';\nexport * from './position/connected-position';\nexport * from './scroll/index';\nexport * from './overlay-module';\nexport * from './dispatchers/index';\nexport {Overlay} from './overlay';\nexport {OverlayContainer} from './overlay-container';\nexport {CdkOverlayOrigin, CdkConnectedOverlay} from './overlay-directives';\nexport {FullscreenOverlayContainer} from './fullscreen-overlay-container';\nexport {OverlayRef, OverlaySizeConfig} from './overlay-ref';\nexport {ViewportRuler} from '@angular/cdk/scrolling';\nexport {ComponentType} from '@angular/cdk/portal';\nexport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n// Export pre-defined position strategies and interface to build custom ones.\nexport {PositionStrategy} from './position/position-strategy';\nexport {GlobalPositionStrategy} from './position/global-position-strategy';\nexport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nexport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './position/flexible-connected-position-strategy';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {BaseOverlayDispatcher as Éµangular_material_src_cdk_overlay_overlay_d} from './dispatchers/base-overlay-dispatcher';\nexport {CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as Éµangular_material_src_cdk_overlay_overlay_a,CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as Éµangular_material_src_cdk_overlay_overlay_c,CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as Éµangular_material_src_cdk_overlay_overlay_b} from './overlay-directives';"]},"metadata":{},"sourceType":"module"}