{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, QueryList, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport { Platform, normalizePassiveListenerOptions, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\nfunction addAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some(existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\n\nfunction removeAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\n\n\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** ID used for the body container where all messages are appended. */\n\n\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** ID prefix used for each created message element. */\n\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** Attribute given to each host element that is described by a message element. */\n\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\n\nlet nextId = 0;\n/** Global map of all registered message elements that have been placed into the document. */\n\nconst messageRegistry = new Map();\n/** Container for all registered messages. */\n\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\n\nclass AriaDescriber {\n  constructor(_document,\n  /**\n   * @breaking-change 8.0.0 `_platform` parameter to be made required.\n   */\n  _platform) {\n    this._platform = _platform;\n    this._document = _document;\n  }\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   */\n\n\n  describe(hostElement, message) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    if (typeof message !== 'string') {\n      // We need to ensure that the element has an ID.\n      this._setMessageId(message);\n\n      messageRegistry.set(message, {\n        messageElement: message,\n        referenceCount: 0\n      });\n    } else if (!messageRegistry.has(message)) {\n      this._createMessageElement(message);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, message)) {\n      this._addMessageReference(hostElement, message);\n    }\n  }\n  /** Removes the host element's aria-describedby reference to the message element. */\n\n\n  removeDescription(hostElement, message) {\n    if (!message || !this._isElementNode(hostElement)) {\n      return;\n    }\n\n    if (this._isElementDescribedByMessage(hostElement, message)) {\n      this._removeMessageReference(hostElement, message);\n    } // If the message is a string, it means that it's one that we created for the\n    // consumer so we can remove it safely, otherwise we should leave it in place.\n\n\n    if (typeof message === 'string') {\n      const registeredMessage = messageRegistry.get(message);\n\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(message);\n      }\n    }\n\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      this._deleteMessagesContainer();\n    }\n  }\n  /** Unregisters all created message elements and removes the message container. */\n\n\n  ngOnDestroy() {\n    const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    if (messagesContainer) {\n      this._deleteMessagesContainer();\n    }\n\n    messageRegistry.clear();\n  }\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n\n\n  _createMessageElement(message) {\n    const messageElement = this._document.createElement('div');\n\n    this._setMessageId(messageElement);\n\n    messageElement.textContent = message;\n\n    this._createMessagesContainer();\n\n    messagesContainer.appendChild(messageElement);\n    messageRegistry.set(message, {\n      messageElement,\n      referenceCount: 0\n    });\n  }\n  /** Assigns a unique ID to an element, if it doesn't have one already. */\n\n\n  _setMessageId(element) {\n    if (!element.id) {\n      element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n    }\n  }\n  /** Deletes the message element from the global messages container. */\n\n\n  _deleteMessageElement(message) {\n    const registeredMessage = messageRegistry.get(message);\n    const messageElement = registeredMessage && registeredMessage.messageElement;\n\n    if (messagesContainer && messageElement) {\n      messagesContainer.removeChild(messageElement);\n    }\n\n    messageRegistry.delete(message);\n  }\n  /** Creates the global container for all aria-describedby messages. */\n\n\n  _createMessagesContainer() {\n    if (!messagesContainer) {\n      // @breaking-change 8.0.0 `_platform` null check can be removed once the parameter is required\n      const canBeAriaHidden = !this._platform || !this._platform.EDGE && !this._platform.TRIDENT;\n\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n\n\n      if (preExistingContainer && preExistingContainer.parentNode) {\n        preExistingContainer.parentNode.removeChild(preExistingContainer);\n      }\n\n      messagesContainer = this._document.createElement('div');\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\n      messagesContainer.classList.add('cdk-visually-hidden'); // IE and Edge won't read out the messages if they're in an `aria-hidden` container.\n      // We only disable `aria-hidden` for these platforms, because it comes with the\n      // disadvantage that people might hit the messages when they've navigated past\n      // the end of the document using the arrow keys.\n\n      messagesContainer.setAttribute('aria-hidden', canBeAriaHidden + '');\n\n      this._document.body.appendChild(messagesContainer);\n    }\n  }\n  /** Deletes the global messages container. */\n\n\n  _deleteMessagesContainer() {\n    if (messagesContainer && messagesContainer.parentNode) {\n      messagesContainer.parentNode.removeChild(messagesContainer);\n      messagesContainer = null;\n    }\n  }\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n\n\n  _removeCdkDescribedByReferenceIds(element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n\n\n  _addMessageReference(element, message) {\n    const registeredMessage = messageRegistry.get(message); // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n    registeredMessage.referenceCount++;\n  }\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n\n\n  _removeMessageReference(element, message) {\n    const registeredMessage = messageRegistry.get(message);\n    registeredMessage.referenceCount--;\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n  /** Returns true if the element has been described by the provided message ID. */\n\n\n  _isElementDescribedByMessage(element, message) {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = messageRegistry.get(message);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n  /** Determines whether a message can be described on a particular element. */\n\n\n  _canBeDescribed(element, message) {\n    if (!this._isElementNode(element)) {\n      return false;\n    }\n\n    if (message && typeof message === 'object') {\n      // We'd have to make some assumptions about the description element's text, if the consumer\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\n      // that it can be used as a description.\n      return true;\n    }\n\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\n    const ariaLabel = element.getAttribute('aria-label'); // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n    // element, because screen readers will end up reading out the same text twice in a row.\n\n    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n  }\n  /** Checks whether a node is an Element node. */\n\n\n  _isElementNode(element) {\n    return element.nodeType === this._document.ELEMENT_NODE;\n  }\n\n}\n\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n  return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nAriaDescriber.ɵprov = ɵɵdefineInjectable({\n  factory: function AriaDescriber_Factory() {\n    return new AriaDescriber(ɵɵinject(DOCUMENT), ɵɵinject(Platform));\n  },\n  token: AriaDescriber,\n  providedIn: \"root\"\n});\n\nAriaDescriber.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\n\n\nclass ListKeyManager {\n  constructor(_items) {\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    this._homeAndEnd = false;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n\n    this._skipPredicateFn = item => item.disabled; // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n\n\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n\n    this.tabOut = new Subject();\n    /** Stream that emits whenever the active item of the list manager changes. */\n\n    this.change = new Subject(); // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(newItems => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n\n\n  skipPredicate(predicate) {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n\n\n  withWrap(shouldWrap = true) {\n    this._wrap = shouldWrap;\n    return this;\n  }\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n\n\n  withVerticalOrientation(enabled = true) {\n    this._vertical = enabled;\n    return this;\n  }\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n\n\n  withHorizontalOrientation(direction) {\n    this._horizontal = direction;\n    return this;\n  }\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n\n\n  withAllowedModifierKeys(keys) {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n\n\n  withTypeAhead(debounceInterval = 200) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n\n\n    this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n      const items = this._getItemsArray(); // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n\n\n      for (let i = 1; i < items.length + 1; i++) {\n        const index = (this._activeItemIndex + i) % items.length;\n        const item = items[index];\n\n        if (!this._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n          this.setActiveItem(index);\n          break;\n        }\n      }\n\n      this._pressedLetters = [];\n    });\n    return this;\n  }\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n\n\n  withHomeAndEnd(enabled = true) {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  setActiveItem(item) {\n    const previousActiveItem = this._activeItem;\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n\n\n  onKeydown(event) {\n    const keyCode = event.keyCode;\n    const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        } // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n\n\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n  /** Index of the currently active item. */\n\n\n  get activeItemIndex() {\n    return this._activeItemIndex;\n  }\n  /** The active item. */\n\n\n  get activeItem() {\n    return this._activeItem;\n  }\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n\n\n  isTyping() {\n    return this._pressedLetters.length > 0;\n  }\n  /** Sets the active item to the first enabled item in the list. */\n\n\n  setFirstItemActive() {\n    this._setActiveItemByIndex(0, 1);\n  }\n  /** Sets the active item to the last enabled item in the list. */\n\n\n  setLastItemActive() {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n  /** Sets the active item to the next enabled item in the list. */\n\n\n  setNextItemActive() {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n  /** Sets the active item to a previous enabled item in the list. */\n\n\n  setPreviousItemActive() {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n  }\n\n  updateActiveItem(item) {\n    const itemArray = this._getItemsArray();\n\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index]; // Explicitly check for `null` and `undefined` because other falsy values are valid.\n\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n\n\n  _setActiveItemByDelta(delta) {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n\n\n  _setActiveInWrapMode(delta) {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n\n\n  _setActiveInDefaultMode(delta) {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n\n\n  _setActiveItemByIndex(index, fallbackDelta) {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n  /** Returns the items as an array. */\n\n\n  _getItemsArray() {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass ActiveDescendantKeyManager extends ListKeyManager {\n  setActiveItem(index) {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass FocusKeyManager extends ListKeyManager {\n  constructor() {\n    super(...arguments);\n    this._origin = 'program';\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n\n\n  setFocusOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n\n  setActiveItem(item) {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for the isFocusable method.\n */\n\n\nclass IsFocusableConfig {\n  constructor() {\n    /**\n     * Whether to count an element as focusable even if it is not currently visible.\n     */\n    this.ignoreVisibility = false;\n  }\n\n} // The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n\n\nclass InteractivityChecker {\n  constructor(_platform) {\n    this._platform = _platform;\n  }\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n\n\n  isDisabled(element) {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n\n\n  isVisible(element) {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n\n\n  isTabbable(element) {\n    // Nothing is tabbable on the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      } // Browsers disable tabbing to an element inside of an invisible frame.\n\n\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    } // In iOS, the browser only considers some specific elements as tabbable.\n\n\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      } // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n\n\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      } // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n\n\n      if (tabIndexValue !== null) {\n        return true;\n      } // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n\n\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n\n    return element.tabIndex >= 0;\n  }\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @param config The config object with options to customize this method's behavior\n   * @returns Whether the element is focusable.\n   */\n\n\n  isFocusable(element, config) {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));\n  }\n\n}\n\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n  return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nInteractivityChecker.ɵprov = ɵɵdefineInjectable({\n  factory: function InteractivityChecker_Factory() {\n    return new InteractivityChecker(ɵɵinject(Platform));\n  },\n  token: InteractivityChecker,\n  providedIn: \"root\"\n});\n\nInteractivityChecker.ctorParameters = () => [{\n  type: Platform\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return window.frameElement;\n  } catch (_a) {\n    return null;\n  }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/** Gets whether an element's  */\n\n\nfunction isNativeFormElement(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex=\"\" as the value \"-32768\"\n\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n\n\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to misalign.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\n\n\nclass FocusTrap {\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n\n    this.startAnchorListener = () => this.focusLastTabbableElement();\n\n    this.endAnchorListener = () => this.focusFirstTabbableElement();\n\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /** Whether the focus trap is active. */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set enabled(value) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  /** Destroys the focus trap by cleaning up the anchors. */\n\n\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n\n      if (startAnchor.parentNode) {\n        startAnchor.parentNode.removeChild(startAnchor);\n      }\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n\n      if (endAnchor.parentNode) {\n        endAnchor.parentNode.removeChild(endAnchor);\n      }\n    }\n\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfuly. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n\n\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n\n        this._startAnchor.addEventListener('focus', this.startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n\n        this._endAnchor.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n\n\n  focusInitialElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n\n\n  focusFirstTabbableElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n\n\n  focusLastTabbableElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n    });\n  }\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n\n\n  _getRegionBoundary(bound) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n\n\n  focusInitialElement() {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      } // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n\n\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement);\n\n        focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus();\n        return !!focusableChild;\n      }\n\n      redirectToElement.focus();\n      return true;\n    }\n\n    return this.focusFirstTabbableElement();\n  }\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n\n\n  focusFirstTabbableElement() {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n\n\n  focusLastTabbableElement() {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n\n\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n\n\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    } // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n\n\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    } // Iterate in reverse DOM order.\n\n\n    let children = root.children || root.childNodes;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n  /** Creates an anchor element. */\n\n\n  _createAnchor() {\n    const anchor = this._document.createElement('div');\n\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n\n\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n\n\n  toggleAnchors(enabled) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n  /** Executes a function when the zone is stable. */\n\n\n  _executeOnStable(fn) {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n    }\n  }\n\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\n\n\nclass FocusTrapFactory {\n  constructor(_checker, _ngZone, _document) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n\n\n  create(element, deferCaptureElements = false) {\n    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n\n}\n\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n  return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nFocusTrapFactory.ɵprov = ɵɵdefineInjectable({\n  factory: function FocusTrapFactory_Factory() {\n    return new FocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(DOCUMENT));\n  },\n  token: FocusTrapFactory,\n  providedIn: \"root\"\n});\n\nFocusTrapFactory.ctorParameters = () => [{\n  type: InteractivityChecker\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/** Directive for trapping focus within a region. */\n\n\nclass CdkTrapFocus {\n  constructor(_elementRef, _focusTrapFactory, _document) {\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n\n    this._previouslyFocusedElement = null;\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n  /** Whether the focus trap is active. */\n\n\n  get enabled() {\n    return this.focusTrap.enabled;\n  }\n\n  set enabled(value) {\n    this.focusTrap.enabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the directive should automatically move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n\n\n  get autoCapture() {\n    return this._autoCapture;\n  }\n\n  set autoCapture(value) {\n    this._autoCapture = coerceBooleanProperty(value);\n  }\n\n  ngOnDestroy() {\n    this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n\n    if (this.autoCapture) {\n      this._captureFocus();\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n\n  ngOnChanges(changes) {\n    const autoCaptureChange = changes['autoCapture'];\n\n    if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {\n      this._captureFocus();\n    }\n  }\n\n  _captureFocus() {\n    this._previouslyFocusedElement = this._document.activeElement;\n    this.focusTrap.focusInitialElementWhenReady();\n  }\n\n}\n\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n  return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nCdkTrapFocus.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkTrapFocus,\n  selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n  inputs: {\n    enabled: [\"cdkTrapFocus\", \"enabled\"],\n    autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n  },\n  exportAs: [\"cdkTrapFocus\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nCdkTrapFocus.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\nCdkTrapFocus.propDecorators = {\n  enabled: [{\n    type: Input,\n    args: ['cdkTrapFocus']\n  }],\n  autoCapture: [{\n    type: Input,\n    args: ['cdkTrapFocusAutoCapture']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTrapFocus]',\n      exportAs: 'cdkTrapFocus'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    enabled: [{\n      type: Input,\n      args: ['cdkTrapFocus']\n    }],\n    autoCapture: [{\n      type: Input,\n      args: ['cdkTrapFocusAutoCapture']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\n\n\nclass ConfigurableFocusTrap extends FocusTrap {\n  constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n    super(_element, _checker, _ngZone, _document, config.defer);\n    this._focusTrapManager = _focusTrapManager;\n    this._inertStrategy = _inertStrategy;\n\n    this._focusTrapManager.register(this);\n  }\n  /** Whether the FocusTrap is enabled. */\n\n\n  get enabled() {\n    return this._enabled;\n  }\n\n  set enabled(value) {\n    this._enabled = value;\n\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n\n\n  destroy() {\n    this._focusTrapManager.deregister(this);\n\n    super.destroy();\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n\n\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n\n    this.toggleAnchors(true);\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n\n\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n\n    this.toggleAnchors(false);\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\n\n\nfunction closest(element, selector) {\n  if (!(element instanceof Node)) {\n    return null;\n  }\n\n  let curr = element;\n\n  while (curr != null && !(curr instanceof Element)) {\n    curr = curr.parentNode;\n  }\n\n  return curr && (hasNativeClosest ? curr.closest(selector) : polyfillClosest(curr, selector));\n}\n/** Polyfill for browsers without Element.closest. */\n\n\nfunction polyfillClosest(element, selector) {\n  let curr = element;\n\n  while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n    curr = curr.parentNode;\n  }\n\n  return curr || null;\n}\n\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n/** IE 11 compatible matches implementation. */\n\nfunction matches(element, selector) {\n  return element.matches ? element.matches(selector) : element['msMatchesSelector'](selector);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\n\n\nclass EventListenerFocusTrapInertStrategy {\n  constructor() {\n    /** Focus event handler. */\n    this._listener = null;\n  }\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n\n\n  preventFocus(focusTrap) {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener, true);\n    }\n\n    this._listener = e => this._trapFocus(focusTrap, e);\n\n    focusTrap._ngZone.runOutsideAngular(() => {\n      focusTrap._document.addEventListener('focus', this._listener, true);\n    });\n  }\n  /** Removes the event listener added in preventFocus. */\n\n\n  allowFocus(focusTrap) {\n    if (!this._listener) {\n      return;\n    }\n\n    focusTrap._document.removeEventListener('focus', this._listener, true);\n\n    this._listener = null;\n  }\n  /**\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\n   * the FocusTrap.\n   *\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\n   * so all this code runs outside Angular as well.\n   */\n\n\n  _trapFocus(focusTrap, event) {\n    const target = event.target;\n    const focusTrapRoot = focusTrap._element; // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n\n    if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n      // Some legacy FocusTrap usages have logic that focuses some element on the page\n      // just before FocusTrap is destroyed. For backwards compatibility, wait\n      // to be sure FocusTrap is still enabled before refocusing.\n      setTimeout(() => {\n        // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n          focusTrap.focusFirstTabbableElement();\n        }\n      });\n    }\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for creating a ConfigurableFocusTrap.\n */\n\n\nclass ConfigurableFocusTrapConfig {\n  constructor() {\n    /**\n     * Whether to defer the creation of FocusTrap elements to be\n     * done manually by the user. Default is to create them\n     * automatically.\n     */\n    this.defer = false;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The injection token used to specify the inert strategy. */\n\n\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\n\nclass FocusTrapManager {\n  constructor() {\n    // A stack of the FocusTraps on the page. Only the FocusTrap at the\n    // top of the stack is active.\n    this._focusTrapStack = [];\n  }\n  /**\n   * Disables the FocusTrap at the top of the stack, and then pushes\n   * the new FocusTrap onto the stack.\n   */\n\n\n  register(focusTrap) {\n    // Dedupe focusTraps that register multiple times.\n    this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n    let stack = this._focusTrapStack;\n\n    if (stack.length) {\n      stack[stack.length - 1]._disable();\n    }\n\n    stack.push(focusTrap);\n\n    focusTrap._enable();\n  }\n  /**\n   * Removes the FocusTrap from the stack, and activates the\n   * FocusTrap that is the new top of the stack.\n   */\n\n\n  deregister(focusTrap) {\n    focusTrap._disable();\n\n    const stack = this._focusTrapStack;\n    const i = stack.indexOf(focusTrap);\n\n    if (i !== -1) {\n      stack.splice(i, 1);\n\n      if (stack.length) {\n        stack[stack.length - 1]._enable();\n      }\n    }\n  }\n\n}\n\nFocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) {\n  return new (t || FocusTrapManager)();\n};\n\nFocusTrapManager.ɵprov = ɵɵdefineInjectable({\n  factory: function FocusTrapManager_Factory() {\n    return new FocusTrapManager();\n  },\n  token: FocusTrapManager,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapManager, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Factory that allows easy instantiation of configurable focus traps. */\n\n\nclass ConfigurableFocusTrapFactory {\n  constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._focusTrapManager = _focusTrapManager;\n    this._document = _document; // TODO split up the strategies into different modules, similar to DateAdapter.\n\n    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n  }\n\n  create(element, config = new ConfigurableFocusTrapConfig()) {\n    let configObject;\n\n    if (typeof config === 'boolean') {\n      configObject = new ConfigurableFocusTrapConfig();\n      configObject.defer = config;\n    } else {\n      configObject = config;\n    }\n\n    return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n  }\n\n}\n\nConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {\n  return new (t || ConfigurableFocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(FocusTrapManager), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n};\n\nConfigurableFocusTrapFactory.ɵprov = ɵɵdefineInjectable({\n  factory: function ConfigurableFocusTrapFactory_Factory() {\n    return new ConfigurableFocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(FocusTrapManager), ɵɵinject(DOCUMENT), ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n  },\n  token: ConfigurableFocusTrapFactory,\n  providedIn: \"root\"\n});\n\nConfigurableFocusTrapFactory.ctorParameters = () => [{\n  type: InteractivityChecker\n}, {\n  type: NgZone\n}, {\n  type: FocusTrapManager\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [FOCUS_TRAP_INERT_STRATEGY]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfigurableFocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: FocusTrapManager\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FOCUS_TRAP_INERT_STRATEGY]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/** @docs-private */\n\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\n\n\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass LiveAnnouncer {\n  constructor(elementToken, _ngZone, _document, _defaultOptions) {\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions; // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  announce(message, ...args) {\n    const defaultOptions = this._defaultOptions;\n    let politeness;\n    let duration;\n\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n\n    this.clear();\n    clearTimeout(this._previousTimeout);\n\n    if (!politeness) {\n      politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n    }\n\n    if (duration == null && defaultOptions) {\n      duration = defaultOptions.duration;\n    } // TODO: ensure changing the politeness works on all environments we support.\n\n\n    this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        clearTimeout(this._previousTimeout);\n        this._previousTimeout = setTimeout(() => {\n          this._liveElement.textContent = message;\n          resolve();\n\n          if (typeof duration === 'number') {\n            this._previousTimeout = setTimeout(() => this.clear(), duration);\n          }\n        }, 100);\n      });\n    });\n  }\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   */\n\n\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n\n      this._liveElement = null;\n    }\n  }\n\n  _createLiveElement() {\n    const elementClass = 'cdk-live-announcer-element';\n\n    const previousElements = this._document.getElementsByClassName(elementClass);\n\n    const liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n\n\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].parentNode.removeChild(previousElements[i]);\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n}\n\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n  return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n};\n\nLiveAnnouncer.ɵprov = ɵɵdefineInjectable({\n  factory: function LiveAnnouncer_Factory() {\n    return new LiveAnnouncer(ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵɵinject(NgZone), ɵɵinject(DOCUMENT), ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n  },\n  token: LiveAnnouncer,\n  providedIn: \"root\"\n});\n\nLiveAnnouncer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n  }]\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n\n\nclass CdkAriaLive {\n  constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n    this._elementRef = _elementRef;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._contentObserver = _contentObserver;\n    this._ngZone = _ngZone;\n    this._politeness = 'polite';\n  }\n  /** The aria-live politeness level to use when announcing messages. */\n\n\n  get politeness() {\n    return this._politeness;\n  }\n\n  set politeness(value) {\n    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver.observe(this._elementRef).subscribe(() => {\n          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n          const elementText = this._elementRef.nativeElement.textContent; // The `MutationObserver` fires also for attribute\n          // changes which we don't want to announce.\n\n          if (elementText !== this._previousAnnouncedText) {\n            this._liveAnnouncer.announce(elementText, this._politeness);\n\n            this._previousAnnouncedText = elementText;\n          }\n        });\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n}\n\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n  return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkAriaLive.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkAriaLive,\n  selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n  inputs: {\n    politeness: [\"cdkAriaLive\", \"politeness\"]\n  },\n  exportAs: [\"cdkAriaLive\"]\n});\n\nCdkAriaLive.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: LiveAnnouncer\n}, {\n  type: ContentObserver\n}, {\n  type: NgZone\n}];\n\nCdkAriaLive.propDecorators = {\n  politeness: [{\n    type: Input,\n    args: ['cdkAriaLive']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAriaLive]',\n      exportAs: 'cdkAriaLive'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: LiveAnnouncer\n    }, {\n      type: ɵngcc2.ContentObserver\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    politeness: [{\n      type: Input,\n      args: ['cdkAriaLive']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n */\n\n\nfunction isFakeMousedownFromScreenReader(event) {\n  return event.buttons === 0;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\n\n\nconst TOUCH_BUFFER_MS = 650;\n/** InjectionToken for FocusMonitorOptions. */\n\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\n\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n\nclass FocusMonitor {\n  constructor(_ngZone, _platform,\n  /** @breaking-change 11.0.0 make document required */\n  document, options) {\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /** The focus origin that the next focus event is a result of. */\n\n    this._origin = null;\n    /** Whether the window has just been focused. */\n\n    this._windowFocused = false;\n    /** Map of elements being monitored to their info. */\n\n    this._elementInfo = new Map();\n    /** The number of elements currently being monitored. */\n\n    this._monitoredElementCount = 0;\n    /**\n     * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n     * as well as the number of monitored elements that they contain. We have to treat focus/blur\n     * handlers differently from the rest of the events, because the browser won't emit events\n     * to the document when focus moves inside of a shadow root.\n     */\n\n    this._rootNodeFocusListenerCount = new Map();\n    /**\n     * Event listener for `keydown` events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n    this._documentKeydownListener = () => {\n      // On keydown record the origin and clear any touch event that may be in progress.\n      this._lastTouchTarget = null;\n\n      this._setOriginForCurrentEventQueue('keyboard');\n    };\n    /**\n     * Event listener for `mousedown` events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n\n    this._documentMousedownListener = event => {\n      // On mousedown record the origin only if there is not touch\n      // target, since a mousedown can happen as a result of a touch event.\n      if (!this._lastTouchTarget) {\n        // In some cases screen readers fire fake `mousedown` events instead of `keydown`.\n        // Resolve the focus source to `keyboard` if we detect one of them.\n        const source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';\n\n        this._setOriginForCurrentEventQueue(source);\n      }\n    };\n    /**\n     * Event listener for `touchstart` events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n\n    this._documentTouchstartListener = event => {\n      // When the touchstart event fires the focus event is not yet in the event queue. This means\n      // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n      // see if a focus happens.\n      if (this._touchTimeoutId != null) {\n        clearTimeout(this._touchTimeoutId);\n      }\n\n      this._lastTouchTarget = getTarget(event);\n      this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    };\n    /**\n     * Event listener for `focus` events on the window.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n\n    this._windowFocusListener = () => {\n      // Make a note of when the window regains focus, so we can\n      // restore the origin info for the focused element.\n      this._windowFocused = true;\n      this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n    };\n    /**\n     * Event listener for `focus` and 'blur' events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n\n\n    this._rootNodeFocusAndBlurListener = event => {\n      const target = getTarget(event);\n      const handler = event.type === 'focus' ? this._onFocus : this._onBlur; // We need to walk up the ancestor chain in order to support `checkChildren`.\n\n      for (let element = target; element; element = element.parentElement) {\n        handler.call(this, event, element);\n      }\n    };\n\n    this._document = document;\n    this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0\n    /* IMMEDIATE */\n    ;\n  }\n\n  monitor(element, checkChildren = false) {\n    const nativeElement = coerceElement(element); // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n\n    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n      return of(null);\n    } // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n    // the shadow root, rather than the `document`, because the browser won't emit focus events\n    // to the `document`, if focus is moving within the same shadow root.\n\n\n    const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n\n    const cachedInfo = this._elementInfo.get(nativeElement); // Check if we're already monitoring this element.\n\n\n    if (cachedInfo) {\n      if (checkChildren) {\n        // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n        // observers into ones that behave as if `checkChildren` was turned on. We need a more\n        // robust solution.\n        cachedInfo.checkChildren = true;\n      }\n\n      return cachedInfo.subject;\n    } // Create monitored element info.\n\n\n    const info = {\n      checkChildren: checkChildren,\n      subject: new Subject(),\n      rootNode\n    };\n\n    this._elementInfo.set(nativeElement, info);\n\n    this._registerGlobalListeners(info);\n\n    return info.subject;\n  }\n\n  stopMonitoring(element) {\n    const nativeElement = coerceElement(element);\n\n    const elementInfo = this._elementInfo.get(nativeElement);\n\n    if (elementInfo) {\n      elementInfo.subject.complete();\n\n      this._setClasses(nativeElement);\n\n      this._elementInfo.delete(nativeElement);\n\n      this._removeGlobalListeners(elementInfo);\n    }\n  }\n\n  focusVia(element, origin, options) {\n    const nativeElement = coerceElement(element);\n\n    const focusedElement = this._getDocument().activeElement; // If the element is focused already, calling `focus` again won't trigger the event listener\n    // which means that the focus classes won't be updated. If that's the case, update the classes\n    // directly without waiting for an event.\n\n\n    if (nativeElement === focusedElement && this._elementInfo.has(nativeElement)) {\n      this._originChanged(nativeElement, origin, this._elementInfo.get(nativeElement));\n    } else {\n      this._setOriginForCurrentEventQueue(origin); // `focus` isn't available on the server\n\n\n      if (typeof nativeElement.focus === 'function') {\n        nativeElement.focus(options);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n  /** Access injected document if available or fallback to global document reference */\n\n\n  _getDocument() {\n    return this._document || document;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n  _getWindow() {\n    const doc = this._getDocument();\n\n    return doc.defaultView || window;\n  }\n\n  _toggleClass(element, className, shouldSet) {\n    if (shouldSet) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n\n  _getFocusOrigin(event) {\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (this._origin) {\n      return this._origin;\n    }\n\n    if (this._windowFocused && this._lastFocusOrigin) {\n      return this._lastFocusOrigin;\n    } else if (this._wasCausedByTouch(event)) {\n      return 'touch';\n    } else {\n      return 'program';\n    }\n  }\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param element The element to update the classes on.\n   * @param origin The focus origin.\n   */\n\n\n  _setClasses(element, origin) {\n    this._toggleClass(element, 'cdk-focused', !!origin);\n\n    this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n\n    this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n\n    this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n\n    this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n  }\n  /**\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\n   * If the detection mode is 'eventual', the origin is never cleared.\n   * @param origin The origin to set.\n   */\n\n\n  _setOriginForCurrentEventQueue(origin) {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n\n      if (this._detectionMode === 0\n      /* IMMEDIATE */\n      ) {\n          // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n          // tick after the interaction event fired. To ensure the focus origin is always correct,\n          // the focus origin will be determined at the beginning of the next tick.\n          this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n        }\n    });\n  }\n  /**\n   * Checks whether the given focus event was caused by a touchstart event.\n   * @param event The focus event to check.\n   * @returns Whether the event was caused by a touch.\n   */\n\n\n  _wasCausedByTouch(event) {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, 'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    const focusTarget = getTarget(event);\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n  /**\n   * Handles focus events on a registered element.\n   * @param event The focus event.\n   * @param element The monitored element.\n   */\n\n\n  _onFocus(event, element) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || !elementInfo.checkChildren && element !== getTarget(event)) {\n      return;\n    }\n\n    this._originChanged(element, this._getFocusOrigin(event), elementInfo);\n  }\n  /**\n   * Handles blur events on a registered element.\n   * @param event The blur event.\n   * @param element The monitored element.\n   */\n\n\n  _onBlur(event, element) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n      return;\n    }\n\n    this._setClasses(element);\n\n    this._emitOrigin(elementInfo.subject, null);\n  }\n\n  _emitOrigin(subject, origin) {\n    this._ngZone.run(() => subject.next(origin));\n  }\n\n  _registerGlobalListeners(elementInfo) {\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    const rootNode = elementInfo.rootNode;\n    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n    if (!rootNodeFocusListeners) {\n      this._ngZone.runOutsideAngular(() => {\n        rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n      });\n    }\n\n    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1); // Register global listeners when first element is monitored.\n\n\n    if (++this._monitoredElementCount === 1) {\n      // Note: we listen to events in the capture phase so we\n      // can detect them even if the user stops propagation.\n      this._ngZone.runOutsideAngular(() => {\n        const document = this._getDocument();\n\n        const window = this._getWindow();\n\n        document.addEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n        document.addEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n        document.addEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n        window.addEventListener('focus', this._windowFocusListener);\n      });\n    }\n  }\n\n  _removeGlobalListeners(elementInfo) {\n    const rootNode = elementInfo.rootNode;\n\n    if (this._rootNodeFocusListenerCount.has(rootNode)) {\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n\n      if (rootNodeFocusListeners > 1) {\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n      } else {\n        rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n\n        this._rootNodeFocusListenerCount.delete(rootNode);\n      }\n    } // Unregister global listeners when last element is unmonitored.\n\n\n    if (! --this._monitoredElementCount) {\n      const document = this._getDocument();\n\n      const window = this._getWindow();\n\n      document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n      document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n      document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n      window.removeEventListener('focus', this._windowFocusListener); // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._touchTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    }\n  }\n  /** Updates all the state on an element once its focus origin has changed. */\n\n\n  _originChanged(element, origin, elementInfo) {\n    this._setClasses(element, origin);\n\n    this._emitOrigin(elementInfo.subject, origin);\n\n    this._lastFocusOrigin = origin;\n  }\n\n}\n\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n  return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n};\n\nFocusMonitor.ɵprov = ɵɵdefineInjectable({\n  factory: function FocusMonitor_Factory() {\n    return new FocusMonitor(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8), ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n  },\n  token: FocusMonitor,\n  providedIn: \"root\"\n});\n\nFocusMonitor.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/** Gets the target of an event, accounting for Shadow DOM. */\n\n\nfunction getTarget(event) {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return event.composedPath ? event.composedPath()[0] : event.target;\n}\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n\n\nclass CdkMonitorFocus {\n  constructor(_elementRef, _focusMonitor) {\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this.cdkFocusChange = new EventEmitter();\n  }\n\n  ngAfterViewInit() {\n    const element = this._elementRef.nativeElement;\n    this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    if (this._monitorSubscription) {\n      this._monitorSubscription.unsubscribe();\n    }\n  }\n\n}\n\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n  return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n};\n\nCdkMonitorFocus.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkMonitorFocus,\n  selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n  outputs: {\n    cdkFocusChange: \"cdkFocusChange\"\n  }\n});\n\nCdkMonitorFocus.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}];\n\nCdkMonitorFocus.propDecorators = {\n  cdkFocusChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusMonitor\n    }];\n  }, {\n    cdkFocusChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\n\n\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\n\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\n\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\n\nclass HighContrastModeDetector {\n  constructor(_platform, document) {\n    this._platform = _platform;\n    this._document = document;\n  }\n  /** Gets the current high-contrast-mode for the page. */\n\n\n  getHighContrastMode() {\n    if (!this._platform.isBrowser) {\n      return 0\n      /* NONE */\n      ;\n    } // Create a test element with an arbitrary background-color that is neither black nor\n    // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n    // appending the test element to the DOM does not affect layout by absolutely positioning it\n\n\n    const testElement = this._document.createElement('div');\n\n    testElement.style.backgroundColor = 'rgb(1,2,3)';\n    testElement.style.position = 'absolute';\n\n    this._document.body.appendChild(testElement); // Get the computed style for the background color, collapsing spaces to normalize between\n    // browsers. Once we get this color, we no longer need the test element. Access the `window`\n    // via the document so we can fake it in tests. Note that we have extra null checks, because\n    // this logic will likely run during app bootstrap and throwing can break the entire app.\n\n\n    const documentWindow = this._document.defaultView || window;\n    const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;\n    const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n\n    this._document.body.removeChild(testElement);\n\n    switch (computedColor) {\n      case 'rgb(0,0,0)':\n        return 2\n        /* WHITE_ON_BLACK */\n        ;\n\n      case 'rgb(255,255,255)':\n        return 1\n        /* BLACK_ON_WHITE */\n        ;\n    }\n\n    return 0\n    /* NONE */\n    ;\n  }\n  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n\n\n  _applyBodyHighContrastModeCssClasses() {\n    if (this._platform.isBrowser && this._document.body) {\n      const bodyClasses = this._document.body.classList; // IE11 doesn't support `classList` operations with multiple arguments\n\n      bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n      bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n      bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n      const mode = this.getHighContrastMode();\n\n      if (mode === 1\n      /* BLACK_ON_WHITE */\n      ) {\n          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n          bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n        } else if (mode === 2\n      /* WHITE_ON_BLACK */\n      ) {\n          bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n          bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n        }\n    }\n  }\n\n}\n\nHighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) {\n  return new (t || HighContrastModeDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nHighContrastModeDetector.ɵprov = ɵɵdefineInjectable({\n  factory: function HighContrastModeDetector_Factory() {\n    return new HighContrastModeDetector(ɵɵinject(Platform), ɵɵinject(DOCUMENT));\n  },\n  token: HighContrastModeDetector,\n  providedIn: \"root\"\n});\n\nHighContrastModeDetector.ctorParameters = () => [{\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighContrastModeDetector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass A11yModule {\n  constructor(highContrastModeDetector) {\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n  }\n\n}\n\nA11yModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: A11yModule\n});\nA11yModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function A11yModule_Factory(t) {\n    return new (t || A11yModule)(ɵngcc0.ɵɵinject(HighContrastModeDetector));\n  },\n  imports: [[PlatformModule, ObserversModule]]\n});\n\nA11yModule.ctorParameters = () => [{\n  type: HighContrastModeDetector\n}];\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function () {\n      return [PlatformModule, ObserversModule];\n    },\n    exports: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n    type: NgModule,\n    args: [{\n      imports: [PlatformModule, ObserversModule],\n      declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n    }]\n  }], function () {\n    return [{\n      type: HighContrastModeDetector\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, TOUCH_BUFFER_MS, isFakeMousedownFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a, ConfigurableFocusTrapConfig as ɵangular_material_src_cdk_a11y_a11y_b };","map":{"version":3,"sources":["../../../../../../src/cdk/a11y/aria-describer/aria-reference.ts","../../../../../../src/cdk/a11y/aria-describer/aria-describer.ts","../../../../../../src/cdk/a11y/key-manager/list-key-manager.ts","../../../../../../src/cdk/a11y/key-manager/activedescendant-key-manager.ts","../../../../../../src/cdk/a11y/key-manager/focus-key-manager.ts","../../../../../../src/cdk/a11y/interactivity-checker/interactivity-checker.ts","../../../../../../src/cdk/a11y/focus-trap/focus-trap.ts","../../../../../../src/cdk/a11y/focus-trap/configurable-focus-trap.ts","../../../../../../src/cdk/a11y/focus-trap/polyfill.ts","../../../../../../src/cdk/a11y/focus-trap/event-listener-inert-strategy.ts","../../../../../../src/cdk/a11y/focus-trap/configurable-focus-trap-config.ts","../../../../../../src/cdk/a11y/focus-trap/focus-trap-inert-strategy.ts","../../../../../../src/cdk/a11y/focus-trap/focus-trap-manager.ts","../../../../../../src/cdk/a11y/focus-trap/configurable-focus-trap-factory.ts","../../../../../../src/cdk/a11y/live-announcer/live-announcer-tokens.ts","../../../../../../src/cdk/a11y/live-announcer/live-announcer.ts","../../../../../../src/cdk/a11y/fake-mousedown.ts","../../../../../../src/cdk/a11y/focus-monitor/focus-monitor.ts","../../../../../../src/cdk/a11y/high-contrast-mode/high-contrast-mode-detector.ts","../../../../../../src/cdk/a11y/a11y-module.ts","../../../../../../src/cdk/a11y/public-api.ts","../../../../../../src/cdk/a11y/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) { return; }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\nimport {Platform} from '@angular/cdk/platform';\n\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the `aria-describedby`.\n */\nexport interface RegisteredMessage {\n  /** The element containing the message. */\n  messageElement: Element;\n\n  /** The number of elements that reference this message element via `aria-describedby`. */\n  referenceCount: number;\n}\n\n/** ID used for the body container where all messages are appended. */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n\n/** ID prefix used for each created message element. */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n\n/** Attribute given to each host element that is described by a message element. */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map<string|HTMLElement, RegisteredMessage>();\n\n/** Container for all registered messages. */\nlet messagesContainer: HTMLElement | null = null;\n\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\n@Injectable({providedIn: 'root'})\nexport class AriaDescriber implements OnDestroy {\n  private _document: Document;\n\n  constructor(\n    @Inject(DOCUMENT) _document: any,\n    /**\n     * @breaking-change 8.0.0 `_platform` parameter to be made required.\n     */\n    private _platform?: Platform) {\n    this._document = _document;\n  }\n\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   */\n  describe(hostElement: Element, message: string|HTMLElement) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n\n    if (typeof message !== 'string') {\n      // We need to ensure that the element has an ID.\n      this._setMessageId(message);\n      messageRegistry.set(message, {messageElement: message, referenceCount: 0});\n    } else if (!messageRegistry.has(message)) {\n      this._createMessageElement(message);\n    }\n\n    if (!this._isElementDescribedByMessage(hostElement, message)) {\n      this._addMessageReference(hostElement, message);\n    }\n  }\n\n  /** Removes the host element's aria-describedby reference to the message element. */\n  removeDescription(hostElement: Element, message: string|HTMLElement) {\n    if (!message || !this._isElementNode(hostElement)) {\n      return;\n    }\n\n    if (this._isElementDescribedByMessage(hostElement, message)) {\n      this._removeMessageReference(hostElement, message);\n    }\n\n    // If the message is a string, it means that it's one that we created for the\n    // consumer so we can remove it safely, otherwise we should leave it in place.\n    if (typeof message === 'string') {\n      const registeredMessage = messageRegistry.get(message);\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(message);\n      }\n    }\n\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      this._deleteMessagesContainer();\n    }\n  }\n\n  /** Unregisters all created message elements and removes the message container. */\n  ngOnDestroy() {\n    const describedElements =\n        this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    if (messagesContainer) {\n      this._deleteMessagesContainer();\n    }\n\n    messageRegistry.clear();\n  }\n\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n  private _createMessageElement(message: string) {\n    const messageElement = this._document.createElement('div');\n    this._setMessageId(messageElement);\n    messageElement.textContent = message;\n\n    this._createMessagesContainer();\n    messagesContainer!.appendChild(messageElement);\n\n    messageRegistry.set(message, {messageElement, referenceCount: 0});\n  }\n\n  /** Assigns a unique ID to an element, if it doesn't have one already. */\n  private _setMessageId(element: HTMLElement) {\n    if (!element.id) {\n      element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n    }\n  }\n\n  /** Deletes the message element from the global messages container. */\n  private _deleteMessageElement(message: string) {\n    const registeredMessage = messageRegistry.get(message);\n    const messageElement = registeredMessage && registeredMessage.messageElement;\n    if (messagesContainer && messageElement) {\n      messagesContainer.removeChild(messageElement);\n    }\n    messageRegistry.delete(message);\n  }\n\n  /** Creates the global container for all aria-describedby messages. */\n  private _createMessagesContainer() {\n    if (!messagesContainer) {\n      // @breaking-change 8.0.0 `_platform` null check can be removed once the parameter is required\n      const canBeAriaHidden = !this._platform || (!this._platform.EDGE && !this._platform.TRIDENT);\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      if (preExistingContainer && preExistingContainer.parentNode) {\n        preExistingContainer.parentNode.removeChild(preExistingContainer);\n      }\n\n      messagesContainer = this._document.createElement('div');\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\n      messagesContainer.classList.add('cdk-visually-hidden');\n\n      // IE and Edge won't read out the messages if they're in an `aria-hidden` container.\n      // We only disable `aria-hidden` for these platforms, because it comes with the\n      // disadvantage that people might hit the messages when they've navigated past\n      // the end of the document using the arrow keys.\n      messagesContainer.setAttribute('aria-hidden', canBeAriaHidden + '');\n      this._document.body.appendChild(messagesContainer);\n    }\n  }\n\n  /** Deletes the global messages container. */\n  private _deleteMessagesContainer() {\n    if (messagesContainer && messagesContainer.parentNode) {\n      messagesContainer.parentNode.removeChild(messagesContainer);\n      messagesContainer = null;\n    }\n  }\n\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n  private _removeCdkDescribedByReferenceIds(element: Element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n        .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n  private _addMessageReference(element: Element, message: string|HTMLElement) {\n    const registeredMessage = messageRegistry.get(message)!;\n\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n\n    registeredMessage.referenceCount++;\n  }\n\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n  private _removeMessageReference(element: Element, message: string|HTMLElement) {\n    const registeredMessage = messageRegistry.get(message)!;\n    registeredMessage.referenceCount--;\n\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n\n  /** Returns true if the element has been described by the provided message ID. */\n  private _isElementDescribedByMessage(element: Element, message: string|HTMLElement): boolean {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = messageRegistry.get(message);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n\n  /** Determines whether a message can be described on a particular element. */\n  private _canBeDescribed(element: Element, message: string|HTMLElement|void): boolean {\n    if (!this._isElementNode(element)) {\n      return false;\n    }\n\n    if (message && typeof message === 'object') {\n      // We'd have to make some assumptions about the description element's text, if the consumer\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\n      // that it can be used as a description.\n      return true;\n    }\n\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\n    const ariaLabel = element.getAttribute('aria-label');\n\n    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n    // element, because screen readers will end up reading out the same text twice in a row.\n    return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\n  }\n\n  /** Checks whether a node is an Element node. */\n  private _isElementNode(element: Node): element is Element {\n    return element.nodeType === this._document.ELEMENT_NODE;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {\n  UP_ARROW,\n  DOWN_ARROW,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  TAB,\n  A,\n  Z,\n  ZERO,\n  NINE,\n  hasModifierKey,\n  HOME,\n  END,\n} from '@angular/cdk/keycodes';\nimport {debounceTime, filter, map, tap} from 'rxjs/operators';\n\n/** This interface is for items that can be passed to a ListKeyManager. */\nexport interface ListKeyManagerOption {\n  /** Whether the option is disabled. */\n  disabled?: boolean;\n\n  /** Gets the label for this option. */\n  getLabel?(): string;\n}\n\n/** Modifier keys handled by the ListKeyManager. */\nexport type ListKeyManagerModifierKey = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey';\n\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\n  private _activeItemIndex = -1;\n  private _activeItem: T | null = null;\n  private _wrap = false;\n  private _letterKeyStream = new Subject<string>();\n  private _typeaheadSubscription = Subscription.EMPTY;\n  private _vertical = true;\n  private _horizontal: 'ltr' | 'rtl' | null;\n  private _allowedModifierKeys: ListKeyManagerModifierKey[] = [];\n  private _homeAndEnd = false;\n\n  /**\n   * Predicate function that can be used to check whether an item should be skipped\n   * by the key manager. By default, disabled items are skipped.\n   */\n  private _skipPredicateFn = (item: T) => item.disabled;\n\n  // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n  private _pressedLetters: string[] = [];\n\n  constructor(private _items: QueryList<T> | T[]) {\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe((newItems: QueryList<T>) => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Stream that emits any time the TAB key is pressed, so components can react\n   * when focus is shifted off of the list.\n   */\n  tabOut: Subject<void> = new Subject<void>();\n\n  /** Stream that emits whenever the active item of the list manager changes. */\n  change = new Subject<number>();\n\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate: (item: T) => boolean): this {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true): this {\n    this._wrap = shouldWrap;\n    return this;\n  }\n\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled: boolean = true): this {\n    this._vertical = enabled;\n    return this;\n  }\n\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this {\n    this._horizontal = direction;\n    return this;\n  }\n\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval: number = 200): this {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && (this._items.length &&\n        this._items.some(item => typeof item.getLabel !== 'function'))) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream.pipe(\n      tap(letter => this._pressedLetters.push(letter)),\n      debounceTime(debounceInterval),\n      filter(() => this._pressedLetters.length > 0),\n      map(() => this._pressedLetters.join(''))\n    ).subscribe(inputString => {\n      const items = this._getItemsArray();\n\n      // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n      for (let i = 1; i < items.length + 1; i++) {\n        const index = (this._activeItemIndex + i) % items.length;\n        const item = items[index];\n\n        if (!this._skipPredicateFn(item) &&\n            item.getLabel!().toUpperCase().trim().indexOf(inputString) === 0) {\n\n          this.setActiveItem(index);\n          break;\n        }\n      }\n\n      this._pressedLetters = [];\n    });\n\n    return this;\n  }\n\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled: boolean = true): this {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the index specified.\n   * @param index The index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the specified item.\n   * @param item The item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    const previousActiveItem = this._activeItem;\n\n    this.updateActiveItem(item);\n\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const modifiers: ListKeyManagerModifierKey[] = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n\n      default:\n      if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n\n  /** Index of the currently active item. */\n  get activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n\n  /** The active item. */\n  get activeItem(): T | null {\n    return this._activeItem;\n  }\n\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping(): boolean {\n    return this._pressedLetters.length > 0;\n  }\n\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n                                            : this._setActiveItemByDelta(-1);\n  }\n\n  /**\n   * Allows setting the active without any other effects.\n   * @param index Index of the item to be set as active.\n   */\n  updateActiveItem(index: number): void;\n\n  /**\n   * Allows setting the active item without any other effects.\n   * @param item Item to be set as active.\n   */\n  updateActiveItem(item: T): void;\n\n  updateActiveItem(item: any): void {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  private _setActiveItemByDelta(delta: -1 | 1): void {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  private _setActiveInWrapMode(delta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n      const item = items[index];\n\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  private _setActiveInDefaultMode(delta: -1 | 1): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  private _setActiveItemByIndex(index: number, fallbackDelta: -1 | 1): void {\n    const items = this._getItemsArray();\n\n    if (!items[index]) {\n      return;\n    }\n\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n\n      if (!items[index]) {\n        return;\n      }\n    }\n\n    this.setActiveItem(index);\n  }\n\n  /** Returns the items as an array. */\n  private _getItemsArray(): T[] {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends ListKeyManagerOption {\n  /** Applies the styles for an active item to this item. */\n  setActiveStyles(): void;\n\n  /** Applies the styles for an inactive item to this item. */\n  setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n\n  /**\n   * Sets the active item to the item at the specified index and adds the\n   * active styles to the newly active item. Also removes active styles\n   * from the previously active item.\n   * @param index Index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item to the specified one and adds the\n   * active styles to the it. Also removes active styles from the\n   * previously active item.\n   * @param item Item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(index: any): void {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\nimport {FocusOrigin} from '../focus-monitor/focus-monitor';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply its label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  /** Focuses the `FocusableOption`. */\n  focus(origin?: FocusOrigin): void;\n}\n\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n  private _origin: FocusOrigin = 'program';\n\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin: FocusOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the active item to the item at the specified\n   * index and focuses the newly active item.\n   * @param index Index of the item to be set as active.\n   */\n  setActiveItem(index: number): void;\n\n  /**\n   * Sets the active item to the item that is specified and focuses it.\n   * @param item Item to be set as active.\n   */\n  setActiveItem(item: T): void;\n\n  setActiveItem(item: any): void {\n    super.setActiveItem(item);\n\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable} from '@angular/core';\n\n/**\n * Configuration for the isFocusable method.\n */\nexport class IsFocusableConfig {\n  /**\n   * Whether to count an element as focusable even if it is not currently visible.\n   */\n  ignoreVisibility: boolean = false;\n}\n\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\n@Injectable({providedIn: 'root'})\nexport class InteractivityChecker {\n\n  constructor(private _platform: Platform) {}\n\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n  isDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n  isVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n  isTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the server ð\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    const frameElement = getFrameElement(getWindow(element));\n\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Browsers disable tabbing to an element inside of an invisible frame.\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    }\n\n    // In iOS, the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      }\n      // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      }\n      // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n      if (tabIndexValue !== null) {\n        return true;\n      }\n      // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n\n    return element.tabIndex >= 0;\n  }\n\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @param config The config object with options to customize this method's behavior\n   * @returns Whether the element is focusable.\n   */\n  isFocusable(element: HTMLElement, config?: IsFocusableConfig): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) &&\n      (config?.ignoreVisibility || this.isVisible(element));\n  }\n\n}\n\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window: Window) {\n  try {\n    return window.frameElement as HTMLElement;\n  } catch {\n    return null;\n  }\n}\n\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight ||\n      (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n\n/** Gets whether an element's  */\nfunction isNativeFormElement(element: Node) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n\n/** Gets whether an element is an input element. */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && (element as HTMLInputElement).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node: HTMLElement): Window {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  DoCheck,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\n\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to misalign.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\nexport class FocusTrap {\n  private _startAnchor: HTMLElement | null;\n  private _endAnchor: HTMLElement | null;\n  private _hasAttached = false;\n\n  // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n  protected startAnchorListener = () => this.focusLastTabbableElement();\n  protected endAnchorListener = () => this.focusFirstTabbableElement();\n\n  /** Whether the focus trap is active. */\n  get enabled(): boolean { return this._enabled; }\n  set enabled(value: boolean) {\n    this._enabled = value;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  protected _enabled: boolean = true;\n\n  constructor(\n    readonly _element: HTMLElement,\n    private _checker: InteractivityChecker,\n    readonly _ngZone: NgZone,\n    readonly _document: Document,\n    deferAnchors = false) {\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n\n      if (startAnchor.parentNode) {\n        startAnchor.parentNode.removeChild(startAnchor);\n      }\n    }\n\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n\n      if (endAnchor.parentNode) {\n        endAnchor.parentNode.removeChild(endAnchor);\n      }\n    }\n\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfuly. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors(): boolean {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor!.addEventListener('focus', this.startAnchorListener);\n      }\n\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor!.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor!, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor!, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n\n    return this._hasAttached;\n  }\n\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusInitialElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusFirstTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusLastTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n    });\n  }\n\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  private _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n                                                 `[cdkFocusRegion${bound}], ` +\n                                                 `[cdk-focus-${bound}]`) as NodeListOf<HTMLElement>;\n\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                     `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                     `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                     `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                     `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ?\n        markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n  focusInitialElement(): boolean {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\n                                                          `[cdkFocusInitial]`) as HTMLElement;\n\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n      }\n\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n        !this._checker.isFocusable(redirectToElement)) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement) as HTMLElement;\n        focusableChild?.focus();\n        return !!focusableChild;\n      }\n\n      redirectToElement.focus();\n      return true;\n    }\n\n    return this.focusFirstTabbableElement();\n  }\n\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusFirstTabbableElement(): boolean {\n    const redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusLastTabbableElement(): boolean {\n    const redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n  hasAttached(): boolean {\n    return this._hasAttached;\n  }\n\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let children = root.children || root.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n        this._getFirstTabbableElement(children[i] as HTMLElement) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    let children = root.children || root.childNodes;\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n        this._getLastTabbableElement(children[i] as HTMLElement) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Creates an anchor element. */\n  private _createAnchor(): HTMLElement {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n  private _toggleAnchorTabIndex(isEnabled: boolean, anchor: HTMLElement) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n  protected toggleAnchors(enabled: boolean) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n\n  /** Executes a function when the zone is stable. */\n  private _executeOnStable(fn: () => any): void {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change for 11.0.0 Remove this class.\n */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapFactory {\n  private _document: Document;\n\n  constructor(\n      private _checker: InteractivityChecker,\n      private _ngZone: NgZone,\n      @Inject(DOCUMENT) _document: any) {\n\n    this._document = _document;\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean = false): FocusTrap {\n    return new FocusTrap(\n        element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n}\n\n/** Directive for trapping focus within a region. */\n@Directive({\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n})\nexport class CdkTrapFocus implements OnDestroy, AfterContentInit, OnChanges, DoCheck {\n  private _document: Document;\n\n  /** Underlying FocusTrap instance. */\n  focusTrap: FocusTrap;\n\n  /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n  private _previouslyFocusedElement: HTMLElement | null = null;\n\n  /** Whether the focus trap is active. */\n  @Input('cdkTrapFocus')\n  get enabled(): boolean { return this.focusTrap.enabled; }\n  set enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n\n  /**\n   * Whether the directive should automatically move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n  @Input('cdkTrapFocusAutoCapture')\n  get autoCapture(): boolean { return this._autoCapture; }\n  set autoCapture(value: boolean) { this._autoCapture = coerceBooleanProperty(value); }\n  private _autoCapture: boolean;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLElement>,\n      private _focusTrapFactory: FocusTrapFactory,\n      @Inject(DOCUMENT) _document: any) {\n\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this.focusTrap.destroy();\n\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n\n    if (this.autoCapture) {\n      this._captureFocus();\n    }\n  }\n\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const autoCaptureChange = changes['autoCapture'];\n\n    if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture &&\n        this.focusTrap.hasAttached()) {\n      this._captureFocus();\n    }\n  }\n\n  private _captureFocus() {\n    this._previouslyFocusedElement = this._document.activeElement as HTMLElement;\n    this.focusTrap.focusInitialElementWhenReady();\n  }\n\n  static ngAcceptInputType_enabled: BooleanInput;\n  static ngAcceptInputType_autoCapture: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\nimport {FocusTrap} from './focus-trap';\nimport {FocusTrapManager, ManagedFocusTrap} from './focus-trap-manager';\nimport {FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {ConfigurableFocusTrapConfig} from './configurable-focus-trap-config';\n\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nexport class ConfigurableFocusTrap extends FocusTrap implements ManagedFocusTrap {\n  /** Whether the FocusTrap is enabled. */\n  get enabled(): boolean { return this._enabled; }\n  set enabled(value: boolean) {\n    this._enabled = value;\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n\n  constructor(\n    _element: HTMLElement,\n    _checker: InteractivityChecker,\n    _ngZone: NgZone,\n    _document: Document,\n    private _focusTrapManager: FocusTrapManager,\n    private _inertStrategy: FocusTrapInertStrategy,\n    config: ConfigurableFocusTrapConfig) {\n    super(_element, _checker, _ngZone, _document, config.defer);\n    this._focusTrapManager.register(this);\n  }\n\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n  destroy() {\n    this._focusTrapManager.deregister(this);\n    super.destroy();\n  }\n\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n    this.toggleAnchors(true);\n  }\n\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n    this.toggleAnchors(false);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\nexport function closest(element: EventTarget|Element|null|undefined, selector: string):\n    Element|null {\n  if (!(element instanceof Node)) { return null; }\n\n  let curr: Node|null = element;\n  while (curr != null && !(curr instanceof Element)) {\n    curr = curr.parentNode;\n  }\n\n  return curr && (hasNativeClosest ?\n      curr.closest(selector) : polyfillClosest(curr, selector)) as Element|null;\n}\n\n/** Polyfill for browsers without Element.closest. */\nfunction polyfillClosest(element: Element, selector: string): Element|null {\n  let curr: Node|null = element;\n  while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n    curr = curr.parentNode;\n  }\n\n  return (curr || null) as Element|null;\n}\n\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n\n/** IE 11 compatible matches implementation. */\nfunction matches(element: Element, selector: string): boolean {\n  return element.matches ?\n      element.matches(selector) :\n      (element as any)['msMatchesSelector'](selector);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {ConfigurableFocusTrap} from './configurable-focus-trap';\nimport {closest} from './polyfill';\n\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nexport class EventListenerFocusTrapInertStrategy implements FocusTrapInertStrategy {\n  /** Focus event handler. */\n  private _listener: ((e: FocusEvent) => void) | null = null;\n\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n  preventFocus(focusTrap: ConfigurableFocusTrap): void {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener!, true);\n    }\n\n    this._listener = (e: FocusEvent) => this._trapFocus(focusTrap, e);\n    focusTrap._ngZone.runOutsideAngular(() => {\n      focusTrap._document.addEventListener('focus', this._listener!, true);\n    });\n  }\n\n  /** Removes the event listener added in preventFocus. */\n  allowFocus(focusTrap: ConfigurableFocusTrap): void {\n    if (!this._listener) {\n      return;\n    }\n    focusTrap._document.removeEventListener('focus', this._listener!, true);\n    this._listener = null;\n  }\n\n  /**\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\n   * the FocusTrap.\n   *\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\n   * so all this code runs outside Angular as well.\n   */\n  private _trapFocus(focusTrap: ConfigurableFocusTrap, event: FocusEvent) {\n    const target = event.target as HTMLElement;\n    const focusTrapRoot = focusTrap._element;\n\n    // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n    if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n        // Some legacy FocusTrap usages have logic that focuses some element on the page\n        // just before FocusTrap is destroyed. For backwards compatibility, wait\n        // to be sure FocusTrap is still enabled before refocusing.\n        setTimeout(() => {\n          // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n          if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n            focusTrap.focusFirstTabbableElement();\n          }\n        });\n      }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for creating a ConfigurableFocusTrap.\n */\nexport class ConfigurableFocusTrapConfig {\n  /**\n   * Whether to defer the creation of FocusTrap elements to be\n   * done manually by the user. Default is to create them\n   * automatically.\n   */\n  defer: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  InjectionToken,\n} from '@angular/core';\nimport {FocusTrap} from './focus-trap';\n\n/** The injection token used to specify the inert strategy. */\nexport const FOCUS_TRAP_INERT_STRATEGY =\n  new InjectionToken<FocusTrapInertStrategy>('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * A strategy that dictates how FocusTrap should prevent elements\n * outside of the FocusTrap from being focused.\n */\nexport interface FocusTrapInertStrategy {\n  /** Makes all elements outside focusTrap unfocusable. */\n  preventFocus(focusTrap: FocusTrap): void;\n  /** Reverts elements made unfocusable by preventFocus to their previous state. */\n  allowFocus(focusTrap: FocusTrap): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\n/**\n * A FocusTrap managed by FocusTrapManager.\n * Implemented by ConfigurableFocusTrap to avoid circular dependency.\n */\nexport interface ManagedFocusTrap {\n  _enable(): void;\n  _disable(): void;\n  focusInitialElementWhenReady(): Promise<boolean>;\n}\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\n@Injectable({providedIn: 'root'})\nexport class FocusTrapManager {\n  // A stack of the FocusTraps on the page. Only the FocusTrap at the\n  // top of the stack is active.\n  private _focusTrapStack: ManagedFocusTrap[] = [];\n\n  /**\n   * Disables the FocusTrap at the top of the stack, and then pushes\n   * the new FocusTrap onto the stack.\n   */\n  register(focusTrap: ManagedFocusTrap): void {\n    // Dedupe focusTraps that register multiple times.\n    this._focusTrapStack = this._focusTrapStack.filter((ft) => ft !== focusTrap);\n\n    let stack = this._focusTrapStack;\n\n    if (stack.length) {\n      stack[stack.length - 1]._disable();\n    }\n\n    stack.push(focusTrap);\n    focusTrap._enable();\n  }\n\n  /**\n   * Removes the FocusTrap from the stack, and activates the\n   * FocusTrap that is the new top of the stack.\n   */\n  deregister(focusTrap: ManagedFocusTrap): void {\n    focusTrap._disable();\n\n    const stack = this._focusTrapStack;\n\n    const i = stack.indexOf(focusTrap);\n    if (i !== -1) {\n      stack.splice(i, 1);\n      if (stack.length) {\n        stack[stack.length - 1]._enable();\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  Optional,\n  NgZone,\n} from '@angular/core';\nimport {InteractivityChecker} from '../interactivity-checker/interactivity-checker';\nimport {ConfigurableFocusTrap} from './configurable-focus-trap';\nimport {ConfigurableFocusTrapConfig} from './configurable-focus-trap-config';\nimport {FOCUS_TRAP_INERT_STRATEGY, FocusTrapInertStrategy} from './focus-trap-inert-strategy';\nimport {EventListenerFocusTrapInertStrategy} from './event-listener-inert-strategy';\nimport {FocusTrapManager} from './focus-trap-manager';\n\n/** Factory that allows easy instantiation of configurable focus traps. */\n@Injectable({providedIn: 'root'})\nexport class ConfigurableFocusTrapFactory {\n  private _document: Document;\n  private _inertStrategy: FocusTrapInertStrategy;\n\n  constructor(\n      private _checker: InteractivityChecker,\n      private _ngZone: NgZone,\n      private _focusTrapManager: FocusTrapManager,\n      @Inject(DOCUMENT) _document: any,\n      @Optional() @Inject(FOCUS_TRAP_INERT_STRATEGY) _inertStrategy?: FocusTrapInertStrategy) {\n\n    this._document = _document;\n    // TODO split up the strategies into different modules, similar to DateAdapter.\n    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n  }\n\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param config The focus trap configuration.\n   * @returns The created focus trap instance.\n   */\n  create(element: HTMLElement, config?: ConfigurableFocusTrapConfig): ConfigurableFocusTrap;\n\n  /**\n   * @deprecated Pass a config object instead of the `deferCaptureElements` flag.\n   * @breaking-change 11.0.0\n   */\n  create(element: HTMLElement, deferCaptureElements: boolean): ConfigurableFocusTrap;\n\n  create(element: HTMLElement, config: ConfigurableFocusTrapConfig | boolean =\n    new ConfigurableFocusTrapConfig()): ConfigurableFocusTrap {\n    let configObject: ConfigurableFocusTrapConfig;\n    if (typeof config === 'boolean') {\n      configObject = new ConfigurableFocusTrapConfig();\n      configObject.defer = config;\n    } else {\n      configObject = config;\n    }\n    return new ConfigurableFocusTrap(\n        element, this._checker, this._ngZone, this._document, this._focusTrapManager,\n        this._inertStrategy, configObject);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n// The tokens for the live announcer are defined in a separate file from LiveAnnouncer\n// as a workaround for https://github.com/angular/angular/issues/22559\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN =\n    new InjectionToken<HTMLElement | null>('liveAnnouncerElement', {\n      providedIn: 'root',\n      factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n    });\n\n/** @docs-private */\nexport function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY(): null {\n  return null;\n}\n\n/** Object that can be used to configure the default options for the LiveAnnouncer. */\nexport interface LiveAnnouncerDefaultOptions {\n  /** Default politeness for the announcements. */\n  politeness?: AriaLivePoliteness;\n\n  /** Default duration for the announcement messages. */\n  duration?: number;\n}\n\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nexport const LIVE_ANNOUNCER_DEFAULT_OPTIONS =\n    new InjectionToken<LiveAnnouncerDefaultOptions>('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentObserver} from '@angular/cdk/observers';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Injectable,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {\n  AriaLivePoliteness,\n  LiveAnnouncerDefaultOptions,\n  LIVE_ANNOUNCER_ELEMENT_TOKEN,\n  LIVE_ANNOUNCER_DEFAULT_OPTIONS,\n} from './live-announcer-tokens';\n\n\n@Injectable({providedIn: 'root'})\nexport class LiveAnnouncer implements OnDestroy {\n  private _liveElement: HTMLElement;\n  private _document: Document;\n  private _previousTimeout?: number;\n\n  constructor(\n      @Optional() @Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN) elementToken: any,\n      private _ngZone: NgZone,\n      @Inject(DOCUMENT) _document: any,\n      @Optional() @Inject(LIVE_ANNOUNCER_DEFAULT_OPTIONS)\n      private _defaultOptions?: LiveAnnouncerDefaultOptions) {\n\n    // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  /**\n   * Announces a message to screenreaders.\n   * @param message Message to be announced to the screenreader.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string): Promise<void>;\n\n  /**\n   * Announces a message to screenreaders.\n   * @param message Message to be announced to the screenreader.\n   * @param politeness The politeness of the announcer element.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;\n\n  /**\n   * Announces a message to screenreaders.\n   * @param message Message to be announced to the screenreader.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, duration?: number): Promise<void>;\n\n  /**\n   * Announces a message to screenreaders.\n   * @param message Message to be announced to the screenreader.\n   * @param politeness The politeness of the announcer element.\n   * @param duration Time in milliseconds after which to clear out the announcer element. Note\n   *   that this takes effect after the message has been added to the DOM, which can be up to\n   *   100ms after `announce` has been called.\n   * @returns Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;\n\n  announce(message: string, ...args: any[]): Promise<void> {\n    const defaultOptions = this._defaultOptions;\n    let politeness: AriaLivePoliteness | undefined;\n    let duration: number | undefined;\n\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n\n    this.clear();\n    clearTimeout(this._previousTimeout);\n\n    if (!politeness) {\n      politeness =\n          (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';\n    }\n\n    if (duration == null && defaultOptions) {\n      duration = defaultOptions.duration;\n    }\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        clearTimeout(this._previousTimeout);\n        this._previousTimeout = setTimeout(() => {\n          this._liveElement.textContent = message;\n          resolve();\n\n          if (typeof duration === 'number') {\n            this._previousTimeout = setTimeout(() => this.clear(), duration);\n          }\n        }, 100);\n      });\n    });\n  }\n\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   */\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n      this._liveElement = null!;\n    }\n  }\n\n  private _createLiveElement(): HTMLElement {\n    const elementClass = 'cdk-live-announcer-element';\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    const liveEl = this._document.createElement('div');\n\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].parentNode!.removeChild(previousElements[i]);\n    }\n\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    this._document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n}\n\n\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\n@Directive({\n  selector: '[cdkAriaLive]',\n  exportAs: 'cdkAriaLive',\n})\nexport class CdkAriaLive implements OnDestroy {\n  /** The aria-live politeness level to use when announcing messages. */\n  @Input('cdkAriaLive')\n  get politeness(): AriaLivePoliteness { return this._politeness; }\n  set politeness(value: AriaLivePoliteness) {\n    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver\n          .observe(this._elementRef)\n          .subscribe(() => {\n            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n            const elementText = this._elementRef.nativeElement.textContent;\n\n            // The `MutationObserver` fires also for attribute\n            // changes which we don't want to announce.\n            if (elementText !== this._previousAnnouncedText) {\n              this._liveAnnouncer.announce(elementText, this._politeness);\n              this._previousAnnouncedText = elementText;\n            }\n          });\n      });\n    }\n  }\n  private _politeness: AriaLivePoliteness = 'polite';\n\n  private _previousAnnouncedText?: string;\n  private _subscription: Subscription | null;\n\n  constructor(private _elementRef: ElementRef, private _liveAnnouncer: LiveAnnouncer,\n              private _contentObserver: ContentObserver, private _ngZone: NgZone) {}\n\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  return event.buttons === 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform, normalizePassiveListenerOptions, _getShadowRoot} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Injectable,\n  InjectionToken,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  AfterViewInit,\n} from '@angular/core';\nimport {Observable, of as observableOf, Subject, Subscription} from 'rxjs';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {isFakeMousedownFromScreenReader} from '../fake-mousedown';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n/**\n * Corresponds to the options that can be passed to the native `focus` event.\n * via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\n */\nexport interface FocusOptions {\n  /** Whether the browser should scroll to the element when it is focused. */\n  preventScroll?: boolean;\n}\n\n/** Detection mode used for attributing the origin of a focus event. */\nexport const enum FocusMonitorDetectionMode {\n  /**\n   * Any mousedown, keydown, or touchstart event that happened in the previous\n   * tick or the current tick will be used to assign a focus event's origin (to\n   * either mouse, keyboard, or touch). This is the default option.\n   */\n  IMMEDIATE,\n  /**\n   * A focus event's origin is always attributed to the last corresponding\n   * mousedown, keydown, or touchstart event, no matter how long ago it occured.\n   */\n  EVENTUAL\n}\n\n/** Injectable service-level options for FocusMonitor. */\nexport interface FocusMonitorOptions {\n  detectionMode?: FocusMonitorDetectionMode;\n}\n\n/** InjectionToken for FocusMonitorOptions. */\nexport const FOCUS_MONITOR_DEFAULT_OPTIONS =\n    new InjectionToken<FocusMonitorOptions>('cdk-focus-monitor-default-options');\n\ntype MonitoredElementInfo = {\n  checkChildren: boolean,\n  subject: Subject<FocusOrigin>,\n  rootNode: HTMLElement|Document\n};\n\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n\n\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n@Injectable({providedIn: 'root'})\nexport class FocusMonitor implements OnDestroy {\n  /** The focus origin that the next focus event is a result of. */\n  private _origin: FocusOrigin = null;\n\n  /** The FocusOrigin of the last focus event tracked by the FocusMonitor. */\n  private _lastFocusOrigin: FocusOrigin;\n\n  /** Whether the window has just been focused. */\n  private _windowFocused = false;\n\n  /** The target of the last touch event. */\n  private _lastTouchTarget: EventTarget | null;\n\n  /** The timeout id of the touch timeout, used to cancel timeout later. */\n  private _touchTimeoutId: number;\n\n  /** The timeout id of the window focus timeout. */\n  private _windowFocusTimeoutId: number;\n\n  /** The timeout id of the origin clearing timeout. */\n  private _originTimeoutId: number;\n\n  /** Map of elements being monitored to their info. */\n  private _elementInfo = new Map<HTMLElement, MonitoredElementInfo>();\n\n  /** The number of elements currently being monitored. */\n  private _monitoredElementCount = 0;\n\n  /**\n   * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n   * as well as the number of monitored elements that they contain. We have to treat focus/blur\n   * handlers differently from the rest of the events, because the browser won't emit events\n   * to the document when focus moves inside of a shadow root.\n   */\n  private _rootNodeFocusListenerCount = new Map<HTMLElement|Document, number>();\n\n  /**\n   * The specified detection mode, used for attributing the origin of a focus\n   * event.\n   */\n  private readonly _detectionMode: FocusMonitorDetectionMode;\n\n  /**\n   * Event listener for `keydown` events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _documentKeydownListener = () => {\n    // On keydown record the origin and clear any touch event that may be in progress.\n    this._lastTouchTarget = null;\n    this._setOriginForCurrentEventQueue('keyboard');\n  }\n\n  /**\n   * Event listener for `mousedown` events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _documentMousedownListener = (event: MouseEvent) => {\n    // On mousedown record the origin only if there is not touch\n    // target, since a mousedown can happen as a result of a touch event.\n    if (!this._lastTouchTarget) {\n      // In some cases screen readers fire fake `mousedown` events instead of `keydown`.\n      // Resolve the focus source to `keyboard` if we detect one of them.\n      const source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';\n      this._setOriginForCurrentEventQueue(source);\n    }\n  }\n\n  /**\n   * Event listener for `touchstart` events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _documentTouchstartListener = (event: TouchEvent) => {\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n    // see if a focus happens.\n    if (this._touchTimeoutId != null) {\n      clearTimeout(this._touchTimeoutId);\n    }\n\n    this._lastTouchTarget = getTarget(event);\n    this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n  }\n\n  /**\n   * Event listener for `focus` events on the window.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _windowFocusListener = () => {\n    // Make a note of when the window regains focus, so we can\n    // restore the origin info for the focused element.\n    this._windowFocused = true;\n    this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n  }\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _platform: Platform,\n      /** @breaking-change 11.0.0 make document required */\n      @Optional() @Inject(DOCUMENT) document: any|null,\n      @Optional() @Inject(FOCUS_MONITOR_DEFAULT_OPTIONS) options:\n          FocusMonitorOptions|null) {\n    this._document = document;\n    this._detectionMode = options?.detectionMode || FocusMonitorDetectionMode.IMMEDIATE;\n  }\n  /**\n   * Event listener for `focus` and 'blur' events on the document.\n   * Needs to be an arrow function in order to preserve the context when it gets bound.\n   */\n  private _rootNodeFocusAndBlurListener = (event: Event) => {\n    const target = getTarget(event);\n    const handler = event.type === 'focus' ? this._onFocus : this._onBlur;\n\n    // We need to walk up the ancestor chain in order to support `checkChildren`.\n    for (let element = target; element; element = element.parentElement) {\n      handler.call(this, event as FocusEvent, element);\n    }\n  }\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: HTMLElement, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  /**\n   * Monitors focus on an element and applies appropriate CSS classes.\n   * @param element The element to monitor\n   * @param checkChildren Whether to count the element as focused when its children are focused.\n   * @returns An observable that emits when the focus state of the element changes.\n   *     When the element is blurred, null will be emitted.\n   */\n  monitor(element: ElementRef<HTMLElement>, checkChildren?: boolean): Observable<FocusOrigin>;\n\n  monitor(element: HTMLElement | ElementRef<HTMLElement>,\n          checkChildren: boolean = false): Observable<FocusOrigin> {\n    const nativeElement = coerceElement(element);\n\n    // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n      return observableOf(null);\n    }\n\n    // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n    // the shadow root, rather than the `document`, because the browser won't emit focus events\n    // to the `document`, if focus is moving within the same shadow root.\n    const rootNode = (_getShadowRoot(nativeElement) as HTMLElement|null) || this._getDocument();\n    const cachedInfo = this._elementInfo.get(nativeElement);\n\n    // Check if we're already monitoring this element.\n    if (cachedInfo) {\n      if (checkChildren) {\n        // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n        // observers into ones that behave as if `checkChildren` was turned on. We need a more\n        // robust solution.\n        cachedInfo.checkChildren = true;\n      }\n\n      return cachedInfo.subject;\n    }\n\n    // Create monitored element info.\n    const info: MonitoredElementInfo = {\n      checkChildren: checkChildren,\n      subject: new Subject<FocusOrigin>(),\n      rootNode\n    };\n    this._elementInfo.set(nativeElement, info);\n    this._registerGlobalListeners(info);\n\n    return info.subject;\n  }\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: HTMLElement): void;\n\n  /**\n   * Stops monitoring an element and removes all focus classes.\n   * @param element The element to stop monitoring.\n   */\n  stopMonitoring(element: ElementRef<HTMLElement>): void;\n\n  stopMonitoring(element: HTMLElement | ElementRef<HTMLElement>): void {\n    const nativeElement = coerceElement(element);\n    const elementInfo = this._elementInfo.get(nativeElement);\n\n    if (elementInfo) {\n      elementInfo.subject.complete();\n\n      this._setClasses(nativeElement);\n      this._elementInfo.delete(nativeElement);\n      this._removeGlobalListeners(elementInfo);\n    }\n  }\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: HTMLElement, origin: FocusOrigin, options?: FocusOptions): void;\n\n  /**\n   * Focuses the element via the specified focus origin.\n   * @param element Element to focus.\n   * @param origin Focus origin.\n   * @param options Options that can be used to configure the focus behavior.\n   */\n  focusVia(element: ElementRef<HTMLElement>, origin: FocusOrigin, options?: FocusOptions): void;\n\n  focusVia(element: HTMLElement | ElementRef<HTMLElement>,\n          origin: FocusOrigin,\n          options?: FocusOptions): void {\n\n    const nativeElement = coerceElement(element);\n    const focusedElement = this._getDocument().activeElement;\n\n    // If the element is focused already, calling `focus` again won't trigger the event listener\n    // which means that the focus classes won't be updated. If that's the case, update the classes\n    // directly without waiting for an event.\n    if (nativeElement === focusedElement && this._elementInfo.has(nativeElement)) {\n      this._originChanged(nativeElement, origin, this._elementInfo.get(nativeElement)!);\n    } else {\n      this._setOriginForCurrentEventQueue(origin);\n\n      // `focus` isn't available on the server\n      if (typeof nativeElement.focus === 'function') {\n        nativeElement.focus(options);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  private _toggleClass(element: Element, className: string, shouldSet: boolean) {\n    if (shouldSet) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n\n  private _getFocusOrigin(event: FocusEvent): FocusOrigin {\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (this._origin) {\n      return this._origin;\n    }\n\n    if (this._windowFocused && this._lastFocusOrigin) {\n      return this._lastFocusOrigin;\n    } else if (this._wasCausedByTouch(event)) {\n      return 'touch';\n    } else {\n      return 'program';\n    }\n  }\n\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param element The element to update the classes on.\n   * @param origin The focus origin.\n   */\n  private _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    this._toggleClass(element, 'cdk-focused', !!origin);\n    this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n    this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n    this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n    this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n  }\n\n  /**\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\n   * If the detection mode is 'eventual', the origin is never cleared.\n   * @param origin The origin to set.\n   */\n  private _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n\n      if (this._detectionMode === FocusMonitorDetectionMode.IMMEDIATE) {\n        // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n        // tick after the interaction event fired. To ensure the focus origin is always correct,\n        // the focus origin will be determined at the beginning of the next tick.\n        this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n      }\n    });\n  }\n\n  /**\n   * Checks whether the given focus event was caused by a touchstart event.\n   * @param event The focus event to check.\n   * @returns Whether the event was caused by a touch.\n   */\n  private _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, 'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    const focusTarget = getTarget(event);\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n\n  /**\n   * Handles focus events on a registered element.\n   * @param event The focus event.\n   * @param element The monitored element.\n   */\n  private _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== getTarget(event))) {\n      return;\n    }\n\n    this._originChanged(element, this._getFocusOrigin(event), elementInfo);\n  }\n\n  /**\n   * Handles blur events on a registered element.\n   * @param event The blur event.\n   * @param element The monitored element.\n   */\n  _onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))) {\n      return;\n    }\n\n    this._setClasses(element);\n    this._emitOrigin(elementInfo.subject, null);\n  }\n\n  private _emitOrigin(subject: Subject<FocusOrigin>, origin: FocusOrigin) {\n    this._ngZone.run(() => subject.next(origin));\n  }\n\n  private _registerGlobalListeners(elementInfo: MonitoredElementInfo) {\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    const rootNode = elementInfo.rootNode;\n    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n    if (!rootNodeFocusListeners) {\n      this._ngZone.runOutsideAngular(() => {\n        rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions);\n        rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions);\n      });\n    }\n\n    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount === 1) {\n      // Note: we listen to events in the capture phase so we\n      // can detect them even if the user stops propagation.\n      this._ngZone.runOutsideAngular(() => {\n        const document = this._getDocument();\n        const window = this._getWindow();\n\n        document.addEventListener('keydown', this._documentKeydownListener,\n          captureEventListenerOptions);\n        document.addEventListener('mousedown', this._documentMousedownListener,\n          captureEventListenerOptions);\n        document.addEventListener('touchstart', this._documentTouchstartListener,\n          captureEventListenerOptions);\n        window.addEventListener('focus', this._windowFocusListener);\n      });\n    }\n  }\n\n  private _removeGlobalListeners(elementInfo: MonitoredElementInfo) {\n    const rootNode = elementInfo.rootNode;\n\n    if (this._rootNodeFocusListenerCount.has(rootNode)) {\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode)!;\n\n      if (rootNodeFocusListeners > 1) {\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n      } else {\n        rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions);\n        rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener,\n          captureEventListenerOptions);\n        this._rootNodeFocusListenerCount.delete(rootNode);\n      }\n    }\n\n    // Unregister global listeners when last element is unmonitored.\n    if (!--this._monitoredElementCount) {\n      const document = this._getDocument();\n      const window = this._getWindow();\n\n      document.removeEventListener('keydown', this._documentKeydownListener,\n        captureEventListenerOptions);\n      document.removeEventListener('mousedown', this._documentMousedownListener,\n        captureEventListenerOptions);\n      document.removeEventListener('touchstart', this._documentTouchstartListener,\n        captureEventListenerOptions);\n      window.removeEventListener('focus', this._windowFocusListener);\n\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._touchTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    }\n  }\n\n  /** Updates all the state on an element once its focus origin has changed. */\n  private _originChanged(element: HTMLElement, origin: FocusOrigin,\n                         elementInfo: MonitoredElementInfo) {\n    this._setClasses(element, origin);\n    this._emitOrigin(elementInfo.subject, origin);\n    this._lastFocusOrigin = origin;\n  }\n}\n\n/** Gets the target of an event, accounting for Shadow DOM. */\nfunction getTarget(event: Event): HTMLElement|null {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return (event.composedPath ? event.composedPath()[0] : event.target) as HTMLElement | null;\n}\n\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\n@Directive({\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n})\nexport class CdkMonitorFocus implements AfterViewInit, OnDestroy {\n  private _monitorSubscription: Subscription;\n  @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _focusMonitor: FocusMonitor) {}\n\n  ngAfterViewInit() {\n    const element = this._elementRef.nativeElement;\n    this._monitorSubscription = this._focusMonitor.monitor(\n      element,\n      element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n    .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    if (this._monitorSubscription) {\n      this._monitorSubscription.unsubscribe();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\n\n/** Set of possible high-contrast mode backgrounds. */\nexport const enum HighContrastMode {\n  NONE,\n  BLACK_ON_WHITE,\n  WHITE_ON_BLACK,\n}\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nexport const BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nexport const WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n\n/** CSS class applied to the document body when in high-contrast mode. */\nexport const HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\n@Injectable({providedIn: 'root'})\nexport class HighContrastModeDetector {\n  private _document: Document;\n\n  constructor(private _platform: Platform, @Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  /** Gets the current high-contrast-mode for the page. */\n  getHighContrastMode(): HighContrastMode {\n    if (!this._platform.isBrowser) {\n      return HighContrastMode.NONE;\n    }\n\n    // Create a test element with an arbitrary background-color that is neither black nor\n    // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n    // appending the test element to the DOM does not affect layout by absolutely positioning it\n    const testElement = this._document.createElement('div');\n    testElement.style.backgroundColor = 'rgb(1,2,3)';\n    testElement.style.position = 'absolute';\n    this._document.body.appendChild(testElement);\n\n    // Get the computed style for the background color, collapsing spaces to normalize between\n    // browsers. Once we get this color, we no longer need the test element. Access the `window`\n    // via the document so we can fake it in tests. Note that we have extra null checks, because\n    // this logic will likely run during app bootstrap and throwing can break the entire app.\n    const documentWindow = this._document.defaultView || window;\n    const computedStyle = (documentWindow && documentWindow.getComputedStyle) ?\n        documentWindow.getComputedStyle(testElement) : null;\n    const computedColor =\n        (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n    this._document.body.removeChild(testElement);\n\n    switch (computedColor) {\n      case 'rgb(0,0,0)': return HighContrastMode.WHITE_ON_BLACK;\n      case 'rgb(255,255,255)': return HighContrastMode.BLACK_ON_WHITE;\n    }\n    return HighContrastMode.NONE;\n  }\n\n  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n  _applyBodyHighContrastModeCssClasses(): void {\n    if (this._platform.isBrowser && this._document.body) {\n      const bodyClasses = this._document.body.classList;\n      // IE11 doesn't support `classList` operations with multiple arguments\n      bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n      bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n      bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n\n      const mode = this.getHighContrastMode();\n      if (mode === HighContrastMode.BLACK_ON_WHITE) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n        bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n      } else if (mode === HighContrastMode.WHITE_ON_BLACK) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n        bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkMonitorFocus} from './focus-monitor/focus-monitor';\nimport {CdkTrapFocus} from './focus-trap/focus-trap';\nimport {HighContrastModeDetector} from './high-contrast-mode/high-contrast-mode-detector';\nimport {CdkAriaLive} from './live-announcer/live-announcer';\n\n\n@NgModule({\n  imports: [PlatformModule, ObserversModule],\n  declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n  exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n})\nexport class A11yModule {\n  constructor(highContrastModeDetector: HighContrastModeDetector) {\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './aria-describer/aria-describer';\nexport * from './key-manager/activedescendant-key-manager';\nexport * from './key-manager/focus-key-manager';\nexport * from './key-manager/list-key-manager';\nexport * from './focus-trap/configurable-focus-trap';\nexport * from './focus-trap/event-listener-inert-strategy';\nexport * from './focus-trap/focus-trap';\nexport * from './focus-trap/configurable-focus-trap-factory';\nexport * from './focus-trap/focus-trap-inert-strategy';\nexport * from './interactivity-checker/interactivity-checker';\nexport * from './live-announcer/live-announcer';\nexport * from './live-announcer/live-announcer-tokens';\nexport * from './focus-monitor/focus-monitor';\nexport * from './fake-mousedown';\nexport * from './a11y-module';\nexport {\n  HighContrastModeDetector,\n  HighContrastMode,\n} from './high-contrast-mode/high-contrast-mode-detector';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {ConfigurableFocusTrapConfig as Éµangular_material_src_cdk_a11y_a11y_b} from './focus-trap/configurable-focus-trap-config';\nexport {FocusTrapManager as Éµangular_material_src_cdk_a11y_a11y_a} from './focus-trap/focus-trap-manager';"]},"metadata":{},"sourceType":"module"}