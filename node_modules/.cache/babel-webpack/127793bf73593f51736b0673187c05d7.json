{"ast":null,"code":"import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/** Time in ms to throttle repositioning after scroll events. */\n\nconst SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\n\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/** Options used to bind passive event listeners. */\n\nconst passiveListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\n\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition({\n    scrollThrottle: SCROLL_THROTTLE_MS\n  });\n}\n/** @docs-private */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\n\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n\n\nclass MatTooltip {\n  constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions) {\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    this._viewInitialized = false;\n    this._pointerExitEventsInitialized = false;\n    /** The default delay in ms before showing the tooltip after show is called */\n\n    this.showDelay = this._defaultOptions.showDelay;\n    /** The default delay in ms before hiding the tooltip after hide is called */\n\n    this.hideDelay = this._defaultOptions.hideDelay;\n    /**\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n     * elements). The different values for this option configure the touch event handling as follows:\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n     * - `on` - Enables touch gestures for all elements and disables native\n     *   browser gestures with no exceptions.\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n     *   showing on touch devices.\n     */\n\n    this.touchGestures = 'auto';\n    this._message = '';\n    /** Manually-bound passive event listeners. */\n\n    this._passiveListeners = [];\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    /**\n     * Handles the keydown events on the host element.\n     * Needs to be an arrow function so that we can use it in addEventListener.\n     */\n\n    this._handleKeydown = event => {\n      if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._ngZone.run(() => this.hide(0));\n      }\n    };\n\n    this._scrollStrategy = scrollStrategy;\n\n    if (_defaultOptions) {\n      if (_defaultOptions.position) {\n        this.position = _defaultOptions.position;\n      }\n\n      if (_defaultOptions.touchGestures) {\n        this.touchGestures = _defaultOptions.touchGestures;\n      }\n    }\n\n    _ngZone.runOutsideAngular(() => {\n      _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n    });\n  }\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  /** Disables the display of the tooltip. */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n    if (this._disabled) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n    }\n  }\n  /** The message to be displayed in the tooltip */\n\n\n  get message() {\n    return this._message;\n  }\n\n  set message(value) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message); // If the message is not a string (e.g. number), convert it to a string and trim it.\n    // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n    // away the string-conversion: https://github.com/angular/components/issues/20684\n\n\n    this._message = value != null ? String(value).trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n\n      this._updateTooltipMessage();\n\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n        });\n      });\n    }\n  }\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n\n\n  get tooltipClass() {\n    return this._tooltipClass;\n  }\n\n  set tooltipClass(value) {\n    this._tooltipClass = value;\n\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this._viewInitialized = true;\n\n    this._setupPointerEnterEventsIfNeeded();\n\n    this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        this._ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        this._ngZone.run(() => this.show());\n      }\n    });\n  }\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n\n\n  ngOnDestroy() {\n    const nativeElement = this._elementRef.nativeElement;\n    clearTimeout(this._touchstartTimeout);\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n\n      this._tooltipInstance = null;\n    } // Clean up the event listeners set in the constructor\n\n\n    nativeElement.removeEventListener('keydown', this._handleKeydown);\n\n    this._passiveListeners.forEach(([event, listener]) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n\n    this._passiveListeners.length = 0;\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(nativeElement, this.message);\n\n    this._focusMonitor.stopMonitoring(nativeElement);\n  }\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n\n\n  show(delay = this.showDelay) {\n    if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n    this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n\n    this._setTooltipClass(this._tooltipClass);\n\n    this._updateTooltipMessage();\n\n    this._tooltipInstance.show(delay);\n  }\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n\n\n  hide(delay = this.hideDelay) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n  /** Shows/hides the tooltip */\n\n\n  toggle() {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n  /** Returns true if the tooltip is currently visible to the user */\n\n\n  _isTooltipVisible() {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n  /** Create the overlay config and position strategy */\n\n\n  _createOverlay() {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.\n\n\n    const strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn('.mat-tooltip').withFlexibleDimensions(false).withViewportMargin(8).withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n  /** Detaches the currently-attached tooltip. */\n\n\n  _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n  /** Updates the position of the current tooltip. */\n\n\n  _updatePosition() {\n    const position = this._overlayRef.getConfig().positionStrategy;\n\n    const origin = this._getOrigin();\n\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([Object.assign(Object.assign({}, origin.main), overlay.main), Object.assign(Object.assign({}, origin.fallback), overlay.fallback)]);\n  }\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n\n\n  _getOrigin() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {\n        originX: 'center',\n        originY: position == 'above' ? 'top' : 'bottom'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      originPosition = {\n        originX: 'start',\n        originY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      originPosition = {\n        originX: 'end',\n        originY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {\n      x,\n      y\n    } = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {\n        originX: x,\n        originY: y\n      }\n    };\n  }\n  /** Returns the overlay position and a fallback position based on the user's preference */\n\n\n  _getOverlayPosition() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition;\n\n    if (position == 'above') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'bottom'\n      };\n    } else if (position == 'below') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'top'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'end',\n        overlayY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'start',\n        overlayY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {\n      x,\n      y\n    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {\n        overlayX: x,\n        overlayY: y\n      }\n    };\n  }\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n\n\n  _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef.updatePosition();\n        }\n      });\n    }\n  }\n  /** Updates the tooltip class */\n\n\n  _setTooltipClass(tooltipClass) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n\n      this._tooltipInstance._markForCheck();\n    }\n  }\n  /** Inverts an overlay position. */\n\n\n  _invertPosition(x, y) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /** Binds the pointer events to the tooltip trigger. */\n\n\n  _setupPointerEnterEventsIfNeeded() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n      return;\n    } // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n\n\n    if (this._platformSupportsMouseEvents()) {\n      this._passiveListeners.push(['mouseenter', () => {\n        this._setupPointerExitEventsIfNeeded();\n\n        this.show();\n      }]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n\n      this._passiveListeners.push(['touchstart', () => {\n        // Note that it's important that we don't `preventDefault` here,\n        // because it can prevent click events from firing on the element.\n        this._setupPointerExitEventsIfNeeded();\n\n        clearTimeout(this._touchstartTimeout);\n        this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n      }]);\n    }\n\n    this._addListeners(this._passiveListeners);\n  }\n\n  _setupPointerExitEventsIfNeeded() {\n    if (this._pointerExitEventsInitialized) {\n      return;\n    }\n\n    this._pointerExitEventsInitialized = true;\n    const exitListeners = [];\n\n    if (this._platformSupportsMouseEvents()) {\n      exitListeners.push(['mouseleave', () => this.hide()]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n\n      const touchendListener = () => {\n        clearTimeout(this._touchstartTimeout);\n        this.hide(this._defaultOptions.touchendHideDelay);\n      };\n\n      exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n    }\n\n    this._addListeners(exitListeners);\n\n    this._passiveListeners.push(...exitListeners);\n  }\n\n  _addListeners(listeners) {\n    listeners.forEach(([event, listener]) => {\n      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n\n  _platformSupportsMouseEvents() {\n    return !this._platform.IOS && !this._platform.ANDROID;\n  }\n  /** Disables the native browser gestures, based on how the tooltip has been configured. */\n\n\n  _disableNativeGesturesIfNecessary() {\n    const gestures = this.touchGestures;\n\n    if (gestures !== 'off') {\n      const element = this._elementRef.nativeElement;\n      const style = element.style; // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n\n      if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n        style.userSelect = style.msUserSelect = style.webkitUserSelect = style.MozUserSelect = 'none';\n      } // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n\n\n      if (gestures === 'on' || !element.draggable) {\n        style.webkitUserDrag = 'none';\n      }\n\n      style.touchAction = 'none';\n      style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n\n}\n\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8));\n};\n\nMatTooltip.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostAttrs: [1, \"mat-tooltip-trigger\"],\n  inputs: {\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n    position: [\"matTooltipPosition\", \"position\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  },\n  exportAs: [\"matTooltip\"]\n});\n\nMatTooltip.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: AriaDescriber\n}, {\n  type: FocusMonitor\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n  }]\n}];\n\nMatTooltip.propDecorators = {\n  position: [{\n    type: Input,\n    args: ['matTooltipPosition']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['matTooltipDisabled']\n  }],\n  showDelay: [{\n    type: Input,\n    args: ['matTooltipShowDelay']\n  }],\n  hideDelay: [{\n    type: Input,\n    args: ['matTooltipHideDelay']\n  }],\n  touchGestures: [{\n    type: Input,\n    args: ['matTooltipTouchGestures']\n  }],\n  message: [{\n    type: Input,\n    args: ['matTooltip']\n  }],\n  tooltipClass: [{\n    type: Input,\n    args: ['matTooltipClass']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        'class': 'mat-tooltip-trigger'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ScrollDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc4.AriaDescriber\n    }, {\n      type: ɵngcc4.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    touchGestures: [{\n      type: Input,\n      args: ['matTooltipTouchGestures']\n    }],\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n\n\nclass TooltipComponent {\n  constructor(_changeDetectorRef, _breakpointObserver) {\n    this._changeDetectorRef = _changeDetectorRef;\n    this._breakpointObserver = _breakpointObserver;\n    /** Property watched by the animation framework to show or hide the tooltip */\n\n    this._visibility = 'initial';\n    /** Whether interactions on the page should close the tooltip */\n\n    this._closeOnInteraction = false;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n\n    this._onHide = new Subject();\n    /** Stream that emits whether the user has a handset-sized display.  */\n\n    this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n\n\n  show(delay) {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    } // Body interactions should cancel the tooltip if there is a delay in showing.\n\n\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null; // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n      this._markForCheck();\n    }, delay);\n  }\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n\n\n  hide(delay) {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null; // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n      this._markForCheck();\n    }, delay);\n  }\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n\n\n  afterHidden() {\n    return this._onHide;\n  }\n  /** Whether the tooltip is being displayed. */\n\n\n  isVisible() {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event) {\n    const toState = event.toState;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n\n\n  _handleBodyInteraction() {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n\n\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n}\n\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n};\n\nTooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() {\n        return ctx._handleBodyInteraction();\n      }, false, ɵngcc0.ɵɵresolveBody);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    }\n  },\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n        return ctx._animationStart();\n      })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n        return ctx._animationDone($event);\n      });\n      ɵngcc0.ɵɵpipe(1, \"async\");\n      ɵngcc0.ɵɵtext(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      let tmp_0_0 = null;\n      ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  directives: [ɵngcc7.NgClass],\n  pipes: [ɵngcc7.AsyncPipe],\n  styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matTooltipAnimations.tooltipState]\n  },\n  changeDetection: 0\n});\n\nTooltipComponent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: BreakpointObserver\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matTooltipAnimations.tooltipState],\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n        '(body:click)': 'this._handleBodyInteraction()',\n        'aria-hidden': 'true'\n      },\n      styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatTooltipModule {}\n\nMatTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatTooltipModule_Factory(t) {\n    return new (t || MatTooltipModule)();\n  },\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function () {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function () {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n      declarations: [MatTooltip, TooltipComponent],\n      entryComponents: [TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };","map":{"version":3,"sources":["../../../../../../src/material/tooltip/tooltip-animations.ts","../../../../../../src/material/tooltip/tooltip.ts","../../../../../../src/material/tooltip/tooltip-module.ts","../../../../../../src/material/tooltip/public-api.ts","../../../../../../src/material/tooltip/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty, NumberInput} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\n/** Possible positions for a tooltip. */\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/**\n * Options for how the tooltip trigger should handle touch gestures.\n * See `MatTooltip.touchGestures` for more information.\n */\nexport type TooltipTouchGestures = 'auto' | 'on' | 'off';\n\n/** Possible visibility states of a tooltip. */\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n  touchGestures?: TooltipTouchGestures;\n  position?: TooltipPosition;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    'class': 'mat-tooltip-trigger'\n  }\n})\nexport class MatTooltip implements OnDestroy, AfterViewInit {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n  private _viewInitialized = false;\n  private _pointerExitEventsInitialized = false;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay: number = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay: number = this._defaultOptions.hideDelay;\n\n  /**\n   * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n   * uses a long press gesture to show and hide, however it can conflict with the native browser\n   * gestures. To work around the conflict, Angular Material disables native gestures on the\n   * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n   * elements). The different values for this option configure the touch event handling as follows:\n   * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n   *   browser gestures on particular elements. In particular, it allows text selection on inputs\n   *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n   * - `on` - Enables touch gestures for all elements and disables native\n   *   browser gestures with no exceptions.\n   * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n   *   showing on touch devices.\n   */\n  @Input('matTooltipTouchGestures') touchGestures: TooltipTouchGestures = 'auto';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n    // away the string-conversion: https://github.com/angular/components/issues/20684\n    this._message = value != null ? String(value).trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n      this._updateTooltipMessage();\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n        });\n      });\n    }\n  }\n  private _message = '';\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  /** Manually-bound passive event listeners. */\n  private readonly _passiveListeners:\n      (readonly [string, EventListenerOrEventListenerObject])[] = [];\n\n  /** Timer started at the last `touchstart` event. */\n  private _touchstartTimeout: number;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    this._scrollStrategy = scrollStrategy;\n\n    if (_defaultOptions) {\n      if (_defaultOptions.position) {\n        this.position = _defaultOptions.position;\n      }\n\n      if (_defaultOptions.touchGestures) {\n        this.touchGestures = _defaultOptions.touchGestures;\n      }\n    }\n\n    _ngZone.runOutsideAngular(() => {\n      _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n    });\n  }\n\n  ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this._viewInitialized = true;\n    this._setupPointerEnterEventsIfNeeded();\n\n    this._focusMonitor.monitor(this._elementRef)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(origin => {\n        // Note that the focus monitor runs outside the Angular zone.\n        if (!origin) {\n          this._ngZone.run(() => this.hide(0));\n        } else if (origin === 'keyboard') {\n          this._ngZone.run(() => this.show());\n        }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    const nativeElement = this._elementRef.nativeElement;\n\n    clearTimeout(this._touchstartTimeout);\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    nativeElement.removeEventListener('keydown', this._handleKeydown);\n    this._passiveListeners.forEach(([event, listener]) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n    this._passiveListeners.length = 0;\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /**\n   * Handles the keydown events on the host element.\n   * Needs to be an arrow function so that we can use it in addEventListener.\n   */\n  private _handleKeydown = (event: KeyboardEvent) => {\n    if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      this._ngZone.run(() => this.hide(0));\n    }\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors =\n        this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n                         .flexibleConnectedTo(this._elementRef)\n                         .withTransformOriginOn('.mat-tooltip')\n                         .withFlexibleDimensions(false)\n                         .withViewportMargin(8)\n                         .withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition!.originX, originPosition!.originY);\n\n    return {\n      main: originPosition!,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition!.overlayX, overlayPosition!.overlayY);\n\n    return {\n      main: overlayPosition!,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n\n  /** Binds the pointer events to the tooltip trigger. */\n  private _setupPointerEnterEventsIfNeeded() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (this._disabled || !this.message || !this._viewInitialized ||\n        this._passiveListeners.length) {\n      return;\n    }\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (this._platformSupportsMouseEvents()) {\n      this._passiveListeners\n          .push(['mouseenter', () => {\n            this._setupPointerExitEventsIfNeeded();\n            this.show();\n          }]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n\n      this._passiveListeners\n          .push(['touchstart', () => {\n            // Note that it's important that we don't `preventDefault` here,\n            // because it can prevent click events from firing on the element.\n            this._setupPointerExitEventsIfNeeded();\n            clearTimeout(this._touchstartTimeout);\n            this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n          }]);\n    }\n\n    this._addListeners(this._passiveListeners);\n  }\n\n  private _setupPointerExitEventsIfNeeded() {\n    if (this._pointerExitEventsInitialized) {\n      return;\n    }\n    this._pointerExitEventsInitialized = true;\n\n    const exitListeners: (readonly [string, EventListenerOrEventListenerObject])[] = [];\n    if (this._platformSupportsMouseEvents()) {\n      exitListeners.push(['mouseleave', () => this.hide()]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n      const touchendListener = () => {\n        clearTimeout(this._touchstartTimeout);\n        this.hide(this._defaultOptions.touchendHideDelay);\n      };\n\n      exitListeners.push(\n        ['touchend', touchendListener],\n        ['touchcancel', touchendListener],\n      );\n    }\n\n    this._addListeners(exitListeners);\n    this._passiveListeners.push(...exitListeners);\n  }\n\n  private _addListeners(\n      listeners: ReadonlyArray<readonly [string, EventListenerOrEventListenerObject]>) {\n    listeners.forEach(([event, listener]) => {\n      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n\n  private _platformSupportsMouseEvents() {\n    return !this._platform.IOS && !this._platform.ANDROID;\n  }\n\n  /** Disables the native browser gestures, based on how the tooltip has been configured. */\n  private _disableNativeGesturesIfNecessary() {\n    const gestures = this.touchGestures;\n\n    if (gestures !== 'off') {\n      const element = this._elementRef.nativeElement;\n      const style = element.style;\n\n      // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n      if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n        style.userSelect = (style as any).msUserSelect = style.webkitUserSelect =\n            (style as any).MozUserSelect = 'none';\n      }\n\n      // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n      if (gestures === 'on' || !element.draggable) {\n        (style as any).webkitUserDrag = 'none';\n      }\n\n      style.touchAction = 'none';\n      style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_hideDelay: NumberInput;\n  static ngAcceptInputType_showDelay: NumberInput;\n}\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent implements OnDestroy {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<void> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide;\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  ngOnDestroy() {\n    this._onHide.complete();\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './tooltip-module';\nexport * from './tooltip';\nexport * from './tooltip-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}